var N = null;var searchIndex = {};
searchIndex["rustls"]={"doc":"Rustls - a modern TLS library Rustls is a TLS library that aims to provide a good level of cryptographic security, requires no configuration to achieve that security, and provides no unsafe features or obsolete cryptography.","items":[[3,"Stream","rustls","This type implements `io::Read` and `io::Write`, encapsulating a Session `S` and an underlying transport `T`, such as a socket.",N,N],[12,"sess","","Our session",0,N],[12,"sock","","The underlying transport, like a socket",0,N],[3,"StreamOwned","","This type implements `io::Read` and `io::Write`, encapsulating and owning a Session `S` and an underlying blocking transport `T`, such as a socket.",N,N],[12,"sess","","Our session",1,N],[12,"sock","","The underlying transport, like a socket",1,N],[3,"RootCertStore","","A container for root certificates able to provide a root-of-trust for connection authentication.",N,N],[12,"roots","","The list of roots.",2,N],[3,"NoClientSessionStorage","","An implementor of `StoresClientSessions` which does nothing.",N,N],[3,"ClientSessionMemoryCache","","An implementor of `StoresClientSessions` that stores everything in memory.  It enforces a limit on the number of entries to bound memory usage.",N,N],[3,"ClientConfig","","Common configuration for (typically) all connections made by a program.",N,N],[12,"ciphersuites","","List of ciphersuites, in preference order.",3,N],[12,"root_store","","Collection of root certificates.",3,N],[12,"alpn_protocols","","Which ALPN protocols we include in our client hello. If empty, no ALPN extension is sent.",3,N],[12,"session_persistence","","How we store session data or tickets.",3,N],[12,"mtu","","Our MTU.  If None, we don't limit TLS message sizes.",3,N],[12,"client_auth_cert_resolver","","How to decide what client auth certificate/keys to use.",3,N],[12,"enable_tickets","","Whether to support RFC5077 tickets.  You must provide a working `session_persistence` member for this to have any meaningful effect.",3,N],[12,"versions","","Supported versions, in no particular order.  The default is all supported versions.",3,N],[12,"ct_logs","","Collection of certificate transparency logs. If this collection is empty, then certificate transparency checking is disabled.",3,N],[12,"enable_sni","","Whether to send the Server Name Indication (SNI) extension during the client handshake.",3,N],[12,"key_log","","How to output key material for debugging.  The default does nothing.",3,N],[12,"enable_early_data","","Whether to send data on the first flight (\"early data\") in TLS 1.3 handshakes.",3,N],[3,"ClientSession","","This represents a single TLS client session.",N,N],[3,"NoServerSessionStorage","","Something which never stores sessions.",N,N],[3,"ServerSessionMemoryCache","","An implementor of `StoresServerSessions` that stores everything in memory.  If enforces a limit on the number of stored sessions to bound memory usage.",N,N],[3,"ServerConfig","","Common configuration for a set of server sessions.",N,N],[12,"ciphersuites","","List of ciphersuites, in preference order.",4,N],[12,"ignore_client_order","","Ignore the client's ciphersuite order. Instead, choose the top ciphersuite in the server list which is supported by the client.",4,N],[12,"mtu","","Our MTU.  If None, we don't limit TLS message sizes.",4,N],[12,"session_storage","","How to store client sessions.",4,N],[12,"ticketer","","How to produce tickets.",4,N],[12,"cert_resolver","","How to choose a server cert and key.",4,N],[12,"alpn_protocols","","Protocol names we support, most preferred first. If empty we don't do ALPN at all.",4,N],[12,"versions","","Supported protocol versions, in no particular order. The default is all supported versions.",4,N],[12,"key_log","","How to output key material for debugging.  The default does nothing.",4,N],[3,"ServerSession","","This represents a single TLS server session.",N,N],[3,"ResolvesServerCertUsingSNI","","Something that resolves do different cert chains/keys based on client-supplied server name (via SNI).",N,N],[3,"Ticketer","","A concrete, safe ticket creation mechanism.",N,N],[3,"NoClientAuth","","Turns off client authentication.",N,N],[3,"AllowAnyAuthenticatedClient","","A `ClientCertVerifier` that will ensure that every client provides a trusted certificate, without any name checking.",N,N],[3,"AllowAnyAnonymousOrAuthenticatedClient","","A `ClientCertVerifier` that will allow both anonymous and authenticated clients, without any name checking.",N,N],[3,"SupportedCipherSuite","","A cipher suite supported by rustls.",N,N],[12,"suite","","The TLS enumeration naming this cipher suite.",5,N],[12,"kx","","How to exchange/agree keys.",5,N],[12,"bulk","","How to do bulk encryption.",5,N],[12,"hash","","How to do hashing.",5,N],[12,"sign","","How to sign messages.",5,N],[12,"enc_key_len","","Encryption key length, for the bulk algorithm.",5,N],[12,"fixed_iv_len","","How long the fixed part of the 'IV' is.",5,N],[12,"explicit_nonce_len","","This is a non-standard extension which extends the key block to provide an initial explicit nonce offset, in a deterministic and safe way.  GCM needs this, chacha20poly1305 works this way by design.",5,N],[3,"Certificate","","This type contains a single certificate by value.",N,N],[12,"0","","",6,N],[3,"PrivateKey","","This type contains a private key by value.",N,N],[12,"0","","",7,N],[3,"NoKeyLog","","KeyLog that does exactly nothing.",N,N],[3,"KeyLogFile","","`KeyLog` implementation that opens a file whose name is given by the `SSLKEYLOGFILE` environment variable, and writes keys into it.",N,N],[4,"ProtocolVersion","","",N,N],[13,"SSLv2","","",8,N],[13,"SSLv3","","",8,N],[13,"TLSv1_0","","",8,N],[13,"TLSv1_1","","",8,N],[13,"TLSv1_2","","",8,N],[13,"TLSv1_3","","",8,N],[13,"Unknown","","",8,N],[4,"SignatureScheme","","",N,N],[13,"RSA_PKCS1_SHA1","","",9,N],[13,"ECDSA_SHA1_Legacy","","",9,N],[13,"RSA_PKCS1_SHA256","","",9,N],[13,"ECDSA_NISTP256_SHA256","","",9,N],[13,"RSA_PKCS1_SHA384","","",9,N],[13,"ECDSA_NISTP384_SHA384","","",9,N],[13,"RSA_PKCS1_SHA512","","",9,N],[13,"ECDSA_NISTP521_SHA512","","",9,N],[13,"RSA_PSS_SHA256","","",9,N],[13,"RSA_PSS_SHA384","","",9,N],[13,"RSA_PSS_SHA512","","",9,N],[13,"ED25519","","",9,N],[13,"ED448","","",9,N],[13,"Unknown","","",9,N],[4,"CipherSuite","","",N,N],[13,"TLS_NULL_WITH_NULL_NULL","","",10,N],[13,"TLS_RSA_WITH_NULL_MD5","","",10,N],[13,"TLS_RSA_WITH_NULL_SHA","","",10,N],[13,"TLS_RSA_EXPORT_WITH_RC4_40_MD5","","",10,N],[13,"TLS_RSA_WITH_RC4_128_MD5","","",10,N],[13,"TLS_RSA_WITH_RC4_128_SHA","","",10,N],[13,"TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5","","",10,N],[13,"TLS_RSA_WITH_IDEA_CBC_SHA","","",10,N],[13,"TLS_RSA_EXPORT_WITH_DES40_CBC_SHA","","",10,N],[13,"TLS_RSA_WITH_DES_CBC_SHA","","",10,N],[13,"TLS_RSA_WITH_3DES_EDE_CBC_SHA","","",10,N],[13,"TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA","","",10,N],[13,"TLS_DH_DSS_WITH_DES_CBC_SHA","","",10,N],[13,"TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA","","",10,N],[13,"TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA","","",10,N],[13,"TLS_DH_RSA_WITH_DES_CBC_SHA","","",10,N],[13,"TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA","","",10,N],[13,"TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA","","",10,N],[13,"TLS_DHE_DSS_WITH_DES_CBC_SHA","","",10,N],[13,"TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA","","",10,N],[13,"TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA","","",10,N],[13,"TLS_DHE_RSA_WITH_DES_CBC_SHA","","",10,N],[13,"TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA","","",10,N],[13,"TLS_DH_anon_EXPORT_WITH_RC4_40_MD5","","",10,N],[13,"TLS_DH_anon_WITH_RC4_128_MD5","","",10,N],[13,"TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA","","",10,N],[13,"TLS_DH_anon_WITH_DES_CBC_SHA","","",10,N],[13,"TLS_DH_anon_WITH_3DES_EDE_CBC_SHA","","",10,N],[13,"SSL_FORTEZZA_KEA_WITH_NULL_SHA","","",10,N],[13,"SSL_FORTEZZA_KEA_WITH_FORTEZZA_CBC_SHA","","",10,N],[13,"TLS_KRB5_WITH_DES_CBC_SHA_or_SSL_FORTEZZA_KEA_WITH_RC4_128_SHA","","",10,N],[13,"TLS_KRB5_WITH_3DES_EDE_CBC_SHA","","",10,N],[13,"TLS_KRB5_WITH_RC4_128_SHA","","",10,N],[13,"TLS_KRB5_WITH_IDEA_CBC_SHA","","",10,N],[13,"TLS_KRB5_WITH_DES_CBC_MD5","","",10,N],[13,"TLS_KRB5_WITH_3DES_EDE_CBC_MD5","","",10,N],[13,"TLS_KRB5_WITH_RC4_128_MD5","","",10,N],[13,"TLS_KRB5_WITH_IDEA_CBC_MD5","","",10,N],[13,"TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA","","",10,N],[13,"TLS_KRB5_EXPORT_WITH_RC2_CBC_40_SHA","","",10,N],[13,"TLS_KRB5_EXPORT_WITH_RC4_40_SHA","","",10,N],[13,"TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5","","",10,N],[13,"TLS_KRB5_EXPORT_WITH_RC2_CBC_40_MD5","","",10,N],[13,"TLS_KRB5_EXPORT_WITH_RC4_40_MD5","","",10,N],[13,"TLS_PSK_WITH_NULL_SHA","","",10,N],[13,"TLS_DHE_PSK_WITH_NULL_SHA","","",10,N],[13,"TLS_RSA_PSK_WITH_NULL_SHA","","",10,N],[13,"TLS_RSA_WITH_AES_128_CBC_SHA","","",10,N],[13,"TLS_DH_DSS_WITH_AES_128_CBC_SHA","","",10,N],[13,"TLS_DH_RSA_WITH_AES_128_CBC_SHA","","",10,N],[13,"TLS_DHE_DSS_WITH_AES_128_CBC_SHA","","",10,N],[13,"TLS_DHE_RSA_WITH_AES_128_CBC_SHA","","",10,N],[13,"TLS_DH_anon_WITH_AES_128_CBC_SHA","","",10,N],[13,"TLS_RSA_WITH_AES_256_CBC_SHA","","",10,N],[13,"TLS_DH_DSS_WITH_AES_256_CBC_SHA","","",10,N],[13,"TLS_DH_RSA_WITH_AES_256_CBC_SHA","","",10,N],[13,"TLS_DHE_DSS_WITH_AES_256_CBC_SHA","","",10,N],[13,"TLS_DHE_RSA_WITH_AES_256_CBC_SHA","","",10,N],[13,"TLS_DH_anon_WITH_AES_256_CBC_SHA","","",10,N],[13,"TLS_RSA_WITH_NULL_SHA256","","",10,N],[13,"TLS_RSA_WITH_AES_128_CBC_SHA256","","",10,N],[13,"TLS_RSA_WITH_AES_256_CBC_SHA256","","",10,N],[13,"TLS_DH_DSS_WITH_AES_128_CBC_SHA256","","",10,N],[13,"TLS_DH_RSA_WITH_AES_128_CBC_SHA256","","",10,N],[13,"TLS_DHE_DSS_WITH_AES_128_CBC_SHA256","","",10,N],[13,"TLS_RSA_WITH_CAMELLIA_128_CBC_SHA","","",10,N],[13,"TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA","","",10,N],[13,"TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA","","",10,N],[13,"TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA","","",10,N],[13,"TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA","","",10,N],[13,"TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA","","",10,N],[13,"TLS_ECDH_ECDSA_WITH_NULL_SHA_draft","","",10,N],[13,"TLS_ECDH_ECDSA_WITH_RC4_128_SHA_draft","","",10,N],[13,"TLS_ECDH_ECDSA_WITH_DES_CBC_SHA_draft","","",10,N],[13,"TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA_draft","","",10,N],[13,"TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA_draft","","",10,N],[13,"TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA_draft","","",10,N],[13,"TLS_ECDH_ECNRA_WITH_DES_CBC_SHA_draft","","",10,N],[13,"TLS_ECDH_ECNRA_WITH_3DES_EDE_CBC_SHA_draft","","",10,N],[13,"TLS_ECMQV_ECDSA_NULL_SHA_draft","","",10,N],[13,"TLS_ECMQV_ECDSA_WITH_RC4_128_SHA_draft","","",10,N],[13,"TLS_ECMQV_ECDSA_WITH_DES_CBC_SHA_draft","","",10,N],[13,"TLS_ECMQV_ECDSA_WITH_3DES_EDE_CBC_SHA_draft","","",10,N],[13,"TLS_ECMQV_ECNRA_NULL_SHA_draft","","",10,N],[13,"TLS_ECMQV_ECNRA_WITH_RC4_128_SHA_draft","","",10,N],[13,"TLS_ECMQV_ECNRA_WITH_DES_CBC_SHA_draft","","",10,N],[13,"TLS_ECMQV_ECNRA_WITH_3DES_EDE_CBC_SHA_draft","","",10,N],[13,"TLS_ECDH_anon_NULL_WITH_SHA_draft","","",10,N],[13,"TLS_ECDH_anon_WITH_RC4_128_SHA_draft","","",10,N],[13,"TLS_ECDH_anon_WITH_DES_CBC_SHA_draft","","",10,N],[13,"TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA_draft","","",10,N],[13,"TLS_ECDH_anon_EXPORT_WITH_DES40_CBC_SHA_draft","","",10,N],[13,"TLS_ECDH_anon_EXPORT_WITH_RC4_40_SHA_draft","","",10,N],[13,"TLS_RSA_EXPORT1024_WITH_RC4_56_MD5","","",10,N],[13,"TLS_RSA_EXPORT1024_WITH_RC2_CBC_56_MD5","","",10,N],[13,"TLS_RSA_EXPORT1024_WITH_DES_CBC_SHA","","",10,N],[13,"TLS_DHE_DSS_EXPORT1024_WITH_DES_CBC_SHA","","",10,N],[13,"TLS_RSA_EXPORT1024_WITH_RC4_56_SHA","","",10,N],[13,"TLS_DHE_DSS_EXPORT1024_WITH_RC4_56_SHA","","",10,N],[13,"TLS_DHE_DSS_WITH_RC4_128_SHA","","",10,N],[13,"TLS_DHE_RSA_WITH_AES_128_CBC_SHA256","","",10,N],[13,"TLS_DH_DSS_WITH_AES_256_CBC_SHA256","","",10,N],[13,"TLS_DH_RSA_WITH_AES_256_CBC_SHA256","","",10,N],[13,"TLS_DHE_DSS_WITH_AES_256_CBC_SHA256","","",10,N],[13,"TLS_DHE_RSA_WITH_AES_256_CBC_SHA256","","",10,N],[13,"TLS_DH_anon_WITH_AES_128_CBC_SHA256","","",10,N],[13,"TLS_DH_anon_WITH_AES_256_CBC_SHA256","","",10,N],[13,"TLS_DHE_DSS_WITH_3DES_EDE_CBC_RMD","","",10,N],[13,"TLS_DHE_DSS_WITH_AES_128_CBC_RMD","","",10,N],[13,"TLS_DHE_DSS_WITH_AES_256_CBC_RMD","","",10,N],[13,"TLS_DHE_RSA_WITH_3DES_EDE_CBC_RMD","","",10,N],[13,"TLS_DHE_RSA_WITH_AES_128_CBC_RMD","","",10,N],[13,"TLS_DHE_RSA_WITH_AES_256_CBC_RMD","","",10,N],[13,"TLS_RSA_WITH_3DES_EDE_CBC_RMD","","",10,N],[13,"TLS_RSA_WITH_AES_128_CBC_RMD","","",10,N],[13,"TLS_RSA_WITH_AES_256_CBC_RMD","","",10,N],[13,"TLS_GOSTR341094_WITH_28147_CNT_IMIT","","",10,N],[13,"TLS_GOSTR341001_WITH_28147_CNT_IMIT","","",10,N],[13,"TLS_GOSTR341094_WITH_NULL_GOSTR3411","","",10,N],[13,"TLS_GOSTR341001_WITH_NULL_GOSTR3411","","",10,N],[13,"TLS_RSA_WITH_CAMELLIA_256_CBC_SHA","","",10,N],[13,"TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA","","",10,N],[13,"TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA","","",10,N],[13,"TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA","","",10,N],[13,"TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA","","",10,N],[13,"TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA","","",10,N],[13,"TLS_PSK_WITH_RC4_128_SHA","","",10,N],[13,"TLS_PSK_WITH_3DES_EDE_CBC_SHA","","",10,N],[13,"TLS_PSK_WITH_AES_128_CBC_SHA","","",10,N],[13,"TLS_PSK_WITH_AES_256_CBC_SHA","","",10,N],[13,"TLS_DHE_PSK_WITH_RC4_128_SHA","","",10,N],[13,"TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA","","",10,N],[13,"TLS_DHE_PSK_WITH_AES_128_CBC_SHA","","",10,N],[13,"TLS_DHE_PSK_WITH_AES_256_CBC_SHA","","",10,N],[13,"TLS_RSA_PSK_WITH_RC4_128_SHA","","",10,N],[13,"TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA","","",10,N],[13,"TLS_RSA_PSK_WITH_AES_128_CBC_SHA","","",10,N],[13,"TLS_RSA_PSK_WITH_AES_256_CBC_SHA","","",10,N],[13,"TLS_RSA_WITH_SEED_CBC_SHA","","",10,N],[13,"TLS_DH_DSS_WITH_SEED_CBC_SHA","","",10,N],[13,"TLS_DH_RSA_WITH_SEED_CBC_SHA","","",10,N],[13,"TLS_DHE_DSS_WITH_SEED_CBC_SHA","","",10,N],[13,"TLS_DHE_RSA_WITH_SEED_CBC_SHA","","",10,N],[13,"TLS_DH_anon_WITH_SEED_CBC_SHA","","",10,N],[13,"TLS_RSA_WITH_AES_128_GCM_SHA256","","",10,N],[13,"TLS_RSA_WITH_AES_256_GCM_SHA384","","",10,N],[13,"TLS_DHE_RSA_WITH_AES_128_GCM_SHA256","","",10,N],[13,"TLS_DHE_RSA_WITH_AES_256_GCM_SHA384","","",10,N],[13,"TLS_DH_RSA_WITH_AES_128_GCM_SHA256","","",10,N],[13,"TLS_DH_RSA_WITH_AES_256_GCM_SHA384","","",10,N],[13,"TLS_DHE_DSS_WITH_AES_128_GCM_SHA256","","",10,N],[13,"TLS_DHE_DSS_WITH_AES_256_GCM_SHA384","","",10,N],[13,"TLS_DH_DSS_WITH_AES_128_GCM_SHA256","","",10,N],[13,"TLS_DH_DSS_WITH_AES_256_GCM_SHA384","","",10,N],[13,"TLS_DH_anon_WITH_AES_128_GCM_SHA256","","",10,N],[13,"TLS_DH_anon_WITH_AES_256_GCM_SHA384","","",10,N],[13,"TLS_PSK_WITH_AES_128_GCM_SHA256","","",10,N],[13,"TLS_PSK_WITH_AES_256_GCM_SHA384","","",10,N],[13,"TLS_DHE_PSK_WITH_AES_128_GCM_SHA256","","",10,N],[13,"TLS_DHE_PSK_WITH_AES_256_GCM_SHA384","","",10,N],[13,"TLS_RSA_PSK_WITH_AES_128_GCM_SHA256","","",10,N],[13,"TLS_RSA_PSK_WITH_AES_256_GCM_SHA384","","",10,N],[13,"TLS_PSK_WITH_AES_128_CBC_SHA256","","",10,N],[13,"TLS_PSK_WITH_AES_256_CBC_SHA384","","",10,N],[13,"TLS_PSK_WITH_NULL_SHA256","","",10,N],[13,"TLS_PSK_WITH_NULL_SHA384","","",10,N],[13,"TLS_DHE_PSK_WITH_AES_128_CBC_SHA256","","",10,N],[13,"TLS_DHE_PSK_WITH_AES_256_CBC_SHA384","","",10,N],[13,"TLS_DHE_PSK_WITH_NULL_SHA256","","",10,N],[13,"TLS_DHE_PSK_WITH_NULL_SHA384","","",10,N],[13,"TLS_RSA_PSK_WITH_AES_128_CBC_SHA256","","",10,N],[13,"TLS_RSA_PSK_WITH_AES_256_CBC_SHA384","","",10,N],[13,"TLS_RSA_PSK_WITH_NULL_SHA256","","",10,N],[13,"TLS_RSA_PSK_WITH_NULL_SHA384","","",10,N],[13,"TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256","","",10,N],[13,"TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256","","",10,N],[13,"TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256","","",10,N],[13,"TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256","","",10,N],[13,"TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256","","",10,N],[13,"TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA256","","",10,N],[13,"TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256","","",10,N],[13,"TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256","","",10,N],[13,"TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256","","",10,N],[13,"TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256","","",10,N],[13,"TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256","","",10,N],[13,"TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA256","","",10,N],[13,"TLS_EMPTY_RENEGOTIATION_INFO_SCSV","","",10,N],[13,"TLS13_AES_128_GCM_SHA256","","",10,N],[13,"TLS13_AES_256_GCM_SHA384","","",10,N],[13,"TLS13_CHACHA20_POLY1305_SHA256","","",10,N],[13,"TLS13_AES_128_CCM_SHA256","","",10,N],[13,"TLS13_AES_128_CCM_8_SHA256","","",10,N],[13,"TLS_ECDH_ECDSA_WITH_NULL_SHA","","",10,N],[13,"TLS_ECDH_ECDSA_WITH_RC4_128_SHA","","",10,N],[13,"TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA","","",10,N],[13,"TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA","","",10,N],[13,"TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA","","",10,N],[13,"TLS_ECDHE_ECDSA_WITH_NULL_SHA","","",10,N],[13,"TLS_ECDHE_ECDSA_WITH_RC4_128_SHA","","",10,N],[13,"TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA","","",10,N],[13,"TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA","","",10,N],[13,"TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA","","",10,N],[13,"TLS_ECDH_RSA_WITH_NULL_SHA","","",10,N],[13,"TLS_ECDH_RSA_WITH_RC4_128_SHA","","",10,N],[13,"TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA","","",10,N],[13,"TLS_ECDH_RSA_WITH_AES_128_CBC_SHA","","",10,N],[13,"TLS_ECDH_RSA_WITH_AES_256_CBC_SHA","","",10,N],[13,"TLS_ECDHE_RSA_WITH_NULL_SHA","","",10,N],[13,"TLS_ECDHE_RSA_WITH_RC4_128_SHA","","",10,N],[13,"TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA","","",10,N],[13,"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA","","",10,N],[13,"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA","","",10,N],[13,"TLS_ECDH_anon_WITH_NULL_SHA","","",10,N],[13,"TLS_ECDH_anon_WITH_RC4_128_SHA","","",10,N],[13,"TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA","","",10,N],[13,"TLS_ECDH_anon_WITH_AES_128_CBC_SHA","","",10,N],[13,"TLS_ECDH_anon_WITH_AES_256_CBC_SHA","","",10,N],[13,"TLS_SRP_SHA_WITH_3DES_EDE_CBC_SHA","","",10,N],[13,"TLS_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA","","",10,N],[13,"TLS_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA","","",10,N],[13,"TLS_SRP_SHA_WITH_AES_128_CBC_SHA","","",10,N],[13,"TLS_SRP_SHA_RSA_WITH_AES_128_CBC_SHA","","",10,N],[13,"TLS_SRP_SHA_DSS_WITH_AES_128_CBC_SHA","","",10,N],[13,"TLS_SRP_SHA_WITH_AES_256_CBC_SHA","","",10,N],[13,"TLS_SRP_SHA_RSA_WITH_AES_256_CBC_SHA","","",10,N],[13,"TLS_SRP_SHA_DSS_WITH_AES_256_CBC_SHA","","",10,N],[13,"TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256","","",10,N],[13,"TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384","","",10,N],[13,"TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256","","",10,N],[13,"TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384","","",10,N],[13,"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256","","",10,N],[13,"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384","","",10,N],[13,"TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256","","",10,N],[13,"TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384","","",10,N],[13,"TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256","","",10,N],[13,"TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384","","",10,N],[13,"TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256","","",10,N],[13,"TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384","","",10,N],[13,"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256","","",10,N],[13,"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384","","",10,N],[13,"TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256","","",10,N],[13,"TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384","","",10,N],[13,"TLS_ECDHE_PSK_WITH_RC4_128_SHA","","",10,N],[13,"TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA","","",10,N],[13,"TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA","","",10,N],[13,"TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA","","",10,N],[13,"TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256","","",10,N],[13,"TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384","","",10,N],[13,"TLS_ECDHE_PSK_WITH_NULL_SHA","","",10,N],[13,"TLS_ECDHE_PSK_WITH_NULL_SHA256","","",10,N],[13,"TLS_ECDHE_PSK_WITH_NULL_SHA384","","",10,N],[13,"TLS_RSA_WITH_ARIA_128_CBC_SHA256","","",10,N],[13,"TLS_RSA_WITH_ARIA_256_CBC_SHA384","","",10,N],[13,"TLS_DH_DSS_WITH_ARIA_128_CBC_SHA256","","",10,N],[13,"TLS_DH_DSS_WITH_ARIA_256_CBC_SHA384","","",10,N],[13,"TLS_DH_RSA_WITH_ARIA_128_CBC_SHA256","","",10,N],[13,"TLS_DH_RSA_WITH_ARIA_256_CBC_SHA384","","",10,N],[13,"TLS_DHE_DSS_WITH_ARIA_128_CBC_SHA256","","",10,N],[13,"TLS_DHE_DSS_WITH_ARIA_256_CBC_SHA384","","",10,N],[13,"TLS_DHE_RSA_WITH_ARIA_128_CBC_SHA256","","",10,N],[13,"TLS_DHE_RSA_WITH_ARIA_256_CBC_SHA384","","",10,N],[13,"TLS_DH_anon_WITH_ARIA_128_CBC_SHA256","","",10,N],[13,"TLS_DH_anon_WITH_ARIA_256_CBC_SHA384","","",10,N],[13,"TLS_ECDHE_ECDSA_WITH_ARIA_128_CBC_SHA256","","",10,N],[13,"TLS_ECDHE_ECDSA_WITH_ARIA_256_CBC_SHA384","","",10,N],[13,"TLS_ECDH_ECDSA_WITH_ARIA_128_CBC_SHA256","","",10,N],[13,"TLS_ECDH_ECDSA_WITH_ARIA_256_CBC_SHA384","","",10,N],[13,"TLS_ECDHE_RSA_WITH_ARIA_128_CBC_SHA256","","",10,N],[13,"TLS_ECDHE_RSA_WITH_ARIA_256_CBC_SHA384","","",10,N],[13,"TLS_ECDH_RSA_WITH_ARIA_128_CBC_SHA256","","",10,N],[13,"TLS_ECDH_RSA_WITH_ARIA_256_CBC_SHA384","","",10,N],[13,"TLS_RSA_WITH_ARIA_128_GCM_SHA256","","",10,N],[13,"TLS_RSA_WITH_ARIA_256_GCM_SHA384","","",10,N],[13,"TLS_DHE_RSA_WITH_ARIA_128_GCM_SHA256","","",10,N],[13,"TLS_DHE_RSA_WITH_ARIA_256_GCM_SHA384","","",10,N],[13,"TLS_DH_RSA_WITH_ARIA_128_GCM_SHA256","","",10,N],[13,"TLS_DH_RSA_WITH_ARIA_256_GCM_SHA384","","",10,N],[13,"TLS_DHE_DSS_WITH_ARIA_128_GCM_SHA256","","",10,N],[13,"TLS_DHE_DSS_WITH_ARIA_256_GCM_SHA384","","",10,N],[13,"TLS_DH_DSS_WITH_ARIA_128_GCM_SHA256","","",10,N],[13,"TLS_DH_DSS_WITH_ARIA_256_GCM_SHA384","","",10,N],[13,"TLS_DH_anon_WITH_ARIA_128_GCM_SHA256","","",10,N],[13,"TLS_DH_anon_WITH_ARIA_256_GCM_SHA384","","",10,N],[13,"TLS_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256","","",10,N],[13,"TLS_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384","","",10,N],[13,"TLS_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256","","",10,N],[13,"TLS_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384","","",10,N],[13,"TLS_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256","","",10,N],[13,"TLS_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384","","",10,N],[13,"TLS_ECDH_RSA_WITH_ARIA_128_GCM_SHA256","","",10,N],[13,"TLS_ECDH_RSA_WITH_ARIA_256_GCM_SHA384","","",10,N],[13,"TLS_PSK_WITH_ARIA_128_CBC_SHA256","","",10,N],[13,"TLS_PSK_WITH_ARIA_256_CBC_SHA384","","",10,N],[13,"TLS_DHE_PSK_WITH_ARIA_128_CBC_SHA256","","",10,N],[13,"TLS_DHE_PSK_WITH_ARIA_256_CBC_SHA384","","",10,N],[13,"TLS_RSA_PSK_WITH_ARIA_128_CBC_SHA256","","",10,N],[13,"TLS_RSA_PSK_WITH_ARIA_256_CBC_SHA384","","",10,N],[13,"TLS_PSK_WITH_ARIA_128_GCM_SHA256","","",10,N],[13,"TLS_PSK_WITH_ARIA_256_GCM_SHA384","","",10,N],[13,"TLS_DHE_PSK_WITH_ARIA_128_GCM_SHA256","","",10,N],[13,"TLS_DHE_PSK_WITH_ARIA_256_GCM_SHA384","","",10,N],[13,"TLS_RSA_PSK_WITH_ARIA_128_GCM_SHA256","","",10,N],[13,"TLS_RSA_PSK_WITH_ARIA_256_GCM_SHA384","","",10,N],[13,"TLS_ECDHE_PSK_WITH_ARIA_128_CBC_SHA256","","",10,N],[13,"TLS_ECDHE_PSK_WITH_ARIA_256_CBC_SHA384","","",10,N],[13,"TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256","","",10,N],[13,"TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384","","",10,N],[13,"TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256","","",10,N],[13,"TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384","","",10,N],[13,"TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256","","",10,N],[13,"TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384","","",10,N],[13,"TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256","","",10,N],[13,"TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384","","",10,N],[13,"TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256","","",10,N],[13,"TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384","","",10,N],[13,"TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256","","",10,N],[13,"TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384","","",10,N],[13,"TLS_DH_RSA_WITH_CAMELLIA_128_GCM_SHA256","","",10,N],[13,"TLS_DH_RSA_WITH_CAMELLIA_256_GCM_SHA384","","",10,N],[13,"TLS_DHE_DSS_WITH_CAMELLIA_128_GCM_SHA256","","",10,N],[13,"TLS_DHE_DSS_WITH_CAMELLIA_256_GCM_SHA384","","",10,N],[13,"TLS_DH_DSS_WITH_CAMELLIA_128_GCM_SHA256","","",10,N],[13,"TLS_DH_DSS_WITH_CAMELLIA_256_GCM_SHA384","","",10,N],[13,"TLS_DH_anon_WITH_CAMELLIA_128_GCM_SHA256","","",10,N],[13,"TLS_DH_anon_WITH_CAMELLIA_256_GCM_SHA384","","",10,N],[13,"TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256","","",10,N],[13,"TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384","","",10,N],[13,"TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256","","",10,N],[13,"TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384","","",10,N],[13,"TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256","","",10,N],[13,"TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384","","",10,N],[13,"TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256","","",10,N],[13,"TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384","","",10,N],[13,"TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256","","",10,N],[13,"TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384","","",10,N],[13,"TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256","","",10,N],[13,"TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384","","",10,N],[13,"TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256","","",10,N],[13,"TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384","","",10,N],[13,"TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256","","",10,N],[13,"TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384","","",10,N],[13,"TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256","","",10,N],[13,"TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384","","",10,N],[13,"TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256","","",10,N],[13,"TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384","","",10,N],[13,"TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256","","",10,N],[13,"TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384","","",10,N],[13,"TLS_RSA_WITH_AES_128_CCM","","",10,N],[13,"TLS_RSA_WITH_AES_256_CCM","","",10,N],[13,"TLS_DHE_RSA_WITH_AES_128_CCM","","",10,N],[13,"TLS_DHE_RSA_WITH_AES_256_CCM","","",10,N],[13,"TLS_RSA_WITH_AES_128_CCM_8","","",10,N],[13,"TLS_RSA_WITH_AES_256_CCM_8","","",10,N],[13,"TLS_DHE_RSA_WITH_AES_128_CCM_8","","",10,N],[13,"TLS_DHE_RSA_WITH_AES_256_CCM_8","","",10,N],[13,"TLS_PSK_WITH_AES_128_CCM","","",10,N],[13,"TLS_PSK_WITH_AES_256_CCM","","",10,N],[13,"TLS_DHE_PSK_WITH_AES_128_CCM","","",10,N],[13,"TLS_DHE_PSK_WITH_AES_256_CCM","","",10,N],[13,"TLS_PSK_WITH_AES_128_CCM_8","","",10,N],[13,"TLS_PSK_WITH_AES_256_CCM_8","","",10,N],[13,"TLS_PSK_DHE_WITH_AES_128_CCM_8","","",10,N],[13,"TLS_PSK_DHE_WITH_AES_256_CCM_8","","",10,N],[13,"TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256","","",10,N],[13,"TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256","","",10,N],[13,"TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256","","",10,N],[13,"TLS_PSK_WITH_CHACHA20_POLY1305_SHA256","","",10,N],[13,"TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256","","",10,N],[13,"TLS_DHE_PSK_WITH_CHACHA20_POLY1305_SHA256","","",10,N],[13,"TLS_RSA_PSK_WITH_CHACHA20_POLY1305_SHA256","","",10,N],[13,"SSL_RSA_FIPS_WITH_DES_CBC_SHA","","",10,N],[13,"SSL_RSA_FIPS_WITH_3DES_EDE_CBC_SHA","","",10,N],[13,"Unknown","","",10,N],[4,"TLSError","","rustls reports protocol errors using this type.",N,N],[13,"InappropriateMessage","","We received a TLS message that isn't valid right now. `expect_types` lists the message types we can expect right now. `got_type` is the type we found.  This error is typically caused by a buggy TLS stack (the peer or this one), a broken network, or an attack.",11,N],[12,"expect_types","rustls::TLSError","Which types we expected",11,N],[12,"got_type","","What type we received",11,N],[13,"InappropriateHandshakeMessage","rustls","We received a TLS handshake message that isn't valid right now. `expect_types` lists the handshake message types we can expect right now.  `got_type` is the type we found.",11,N],[12,"expect_types","rustls::TLSError","Which handshake type we expected",11,N],[12,"got_type","","What handshake type we received",11,N],[13,"CorruptMessage","rustls","The peer sent us a syntactically incorrect TLS message.",11,N],[13,"CorruptMessagePayload","","The peer sent us a TLS message with invalid contents.",11,N],[13,"NoCertificatesPresented","","The peer didn't give us any certificates.",11,N],[13,"DecryptError","","We couldn't decrypt a message.  This is invariably fatal.",11,N],[13,"PeerIncompatibleError","","The peer doesn't support a protocol version/feature we require. The parameter gives a hint as to what version/feature it is.",11,N],[13,"PeerMisbehavedError","","The peer deviated from the standard TLS protocol. The parameter gives a hint where.",11,N],[13,"AlertReceived","","We received a fatal alert.  This means the peer is unhappy.",11,N],[13,"WebPKIError","","The presented certificate chain is invalid.",11,N],[13,"InvalidSCT","","The presented SCT(s) were invalid.",11,N],[13,"General","","A catch-all error for unlikely errors.",11,N],[13,"FailedToGetCurrentTime","","We failed to figure out what time it currently is.",11,N],[13,"InvalidDNSName","","A syntactically-invalid DNS hostname was given.",11,N],[13,"HandshakeNotComplete","","This function doesn't work until the TLS handshake is complete.",11,N],[13,"PeerSentOversizedRecord","","The peer sent an oversized record/fragment.",11,N],[4,"BulkAlgorithm","","Bulk symmetric encryption scheme used by a cipher suite.",N,N],[13,"AES_128_GCM","","AES with 128-bit keys in Galois counter mode.",12,N],[13,"AES_256_GCM","","AES with 256-bit keys in Galois counter mode.",12,N],[13,"CHACHA20_POLY1305","","Chacha20 for confidentiality with poly1305 for authenticity.",12,N],[11,"encode","","",6,[[["self"],["vec"]]]],[11,"read","","",6,[[["reader"]],["option",["certificate"]]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"eq","","",8,[[["self"],["protocolversion"]],["bool"]]],[11,"ne","","",8,[[["self"],["protocolversion"]],["bool"]]],[11,"clone","","",8,[[["self"]],["protocolversion"]]],[11,"get_u16","","",8,[[["self"]],["u16"]]],[11,"encode","","",8,[[["self"],["vec"]]]],[11,"read","","",8,[[["reader"]],["option"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"eq","","",10,[[["self"],["ciphersuite"]],["bool"]]],[11,"ne","","",10,[[["self"],["ciphersuite"]],["bool"]]],[11,"clone","","",10,[[["self"]],["ciphersuite"]]],[11,"get_u16","","",10,[[["self"]],["u16"]]],[11,"encode","","",10,[[["self"],["vec"]]]],[11,"read","","",10,[[["reader"]],["option"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"eq","","",9,[[["self"],["signaturescheme"]],["bool"]]],[11,"ne","","",9,[[["self"],["signaturescheme"]],["bool"]]],[11,"clone","","",9,[[["self"]],["signaturescheme"]]],[11,"get_u16","","",9,[[["self"]],["u16"]]],[11,"encode","","",9,[[["self"],["vec"]]]],[11,"read","","",9,[[["reader"]],["option"]]],[11,"sign","","",9,[[["self"]],["signaturealgorithm"]]],[11,"make","","",9,[[["signaturealgorithm"],["hashalgorithm"]],["signaturescheme"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"eq","","",11,[[["self"],["tlserror"]],["bool"]]],[11,"ne","","",11,[[["self"],["tlserror"]],["bool"]]],[11,"clone","","",11,[[["self"]],["tlserror"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"description","","",11,[[["self"]],["str"]]],[11,"new","","Make a new Stream using the Session `sess` and socket-like object `sock`.  This does not fail and does no IO.",0,[[["s"],["t"]],["stream"]]],[11,"read","","",0,N],[11,"write","","",0,N],[11,"flush","","",0,[[["self"]],["result"]]],[11,"new","","Make a new StreamOwned taking the Session `sess` and socket-like object `sock`.  This does not fail and does no IO.",1,[[["s"],["t"]],["streamowned"]]],[11,"read","","",1,N],[11,"write","","",1,N],[11,"flush","","",1,[[["self"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["rootcertstore"]]],[11,"empty","","Make a new, empty `RootCertStore`.",2,[[],["rootcertstore"]]],[11,"is_empty","","Return true if there are no certificates.",2,[[["self"]],["bool"]]],[11,"len","","Say how many certificates are in the container.",2,[[["self"]],["usize"]]],[11,"get_subjects","","Return the Subject Names for certificates in the container.",2,[[["self"]],["distinguishednames"]]],[11,"add","","Add a single DER-encoded certificate to the store.",2,[[["self"],["certificate"]],["result",["error"]]]],[11,"add_server_trust_anchors","","Adds all the given TrustAnchors `anchors`.  This does not fail.",2,[[["self"],["tlsservertrustanchors"]]]],[11,"add_pem_file","","Parse a PEM file and add all certificates found inside. Errors are non-specific; they may be io errors in `rd` and PEM format errors, but not certificate validity errors.",2,[[["self"],["bufread"]],["result"]]],[11,"new","","Construct a new `AllowAnyAuthenticatedClient`.",13,[[["rootcertstore"]],["arc",["clientcertverifier"]]]],[11,"new","","Construct a new `AllowAnyAnonymousOrAuthenticatedClient`.",14,[[["rootcertstore"]],["arc",["clientcertverifier"]]]],[11,"new","","Constructs a `NoClientAuth` and wraps it in an `Arc`.",15,[[],["arc",["clientcertverifier"]]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"eq","","",12,[[["self"],["bulkalgorithm"]],["bool"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"eq","","",5,[[["self"],["supportedciphersuite"]],["bool"]]],[11,"get_hash","","Which hash function to use with this suite.",5,[[["self"]],["algorithm"]]],[11,"do_client_kx","","We have parameters and a verified public key in `kx_params`. Generate an ephemeral key, generate the shared secret, and return it and the public half in a `KeyExchangeResult`.",5,N],[11,"start_server_kx","","Start the KX process with the given group.  This generates the server's share, but we don't yet have the client's share.",5,[[["self"],["namedgroup"]],["option",["keyexchange"]]]],[11,"resolve_sig_schemes","","Resolve the set of supported `SignatureScheme`s from the offered `SupportedSignatureSchemes`.  If we return an empty set, the handshake terminates.",5,N],[11,"get_aead_alg","","Which AEAD algorithm to use for this suite.",5,[[["self"]],["algorithm"]]],[11,"key_block_len","","Length of key block that needs to be output by the key derivation phase for this suite.",5,[[["self"]],["usize"]]],[11,"usable_for_version","","Return true if this suite is usable for TLS `version`.",5,[[["self"],["protocolversion"]],["bool"]]],[11,"can_resume_to","","Can a session using suite self resume using suite new_suite?",5,[[["self"],["supportedciphersuite"]],["bool"]]],[11,"new","","Make the recommended Ticketer.  This produces tickets with a 12 hour life and randomly generated keys.",16,[[],["arc",["producestickets"]]]],[11,"put","","",17,[[["self"],["vec",["u8"]],["vec",["u8"]]],["bool"]]],[11,"get","","",17,N],[11,"take","","",17,N],[11,"new","","Make a new ServerSessionMemoryCache.  `size` is the maximum number of stored sessions.",18,[[["usize"]],["arc",["serversessionmemorycache"]]]],[11,"put","","",18,[[["self"],["vec",["u8"]],["vec",["u8"]]],["bool"]]],[11,"get","","",18,N],[11,"take","","",18,N],[11,"new","","Create a new and empty (ie, knows no certificates) resolver.",19,[[],["resolvesservercertusingsni"]]],[11,"add","","Add a new `sign::CertifiedKey` to be used for the given SNI `name`.",19,[[["self"],["str"],["certifiedkey"]],["result",["tlserror"]]]],[11,"resolve","","",19,N],[11,"clone","","",4,[[["self"]],["serverconfig"]]],[11,"new","","Make a `ServerConfig` with a default set of ciphersuites, no keys/certificates, and no ALPN protocols.  Session resumption is enabled by storing up to 256 recent sessions in memory. Tickets are disabled.",4,[[["arc",["clientcertverifier"]]],["serverconfig"]]],[11,"set_persistence","","Sets the session persistence layer to `persist`.",4,[[["self"],["arc",["storesserversessions"]]]]],[11,"set_single_cert","","Sets a single certificate chain and matching private key.  This certificate and key is used for all subsequent connections, irrespective of things like SNI hostname.",4,[[["self"],["vec",["certificate"]],["privatekey"]],["result",["tlserror"]]]],[11,"set_single_cert_with_ocsp_and_sct","","Sets a single certificate chain, matching private key and OCSP response.  This certificate and key is used for all subsequent connections, irrespective of things like SNI hostname.",4,[[["self"],["vec",["certificate"]],["privatekey"],["vec",["u8"]],["vec",["u8"]]],["result",["tlserror"]]]],[11,"set_protocols","","Set the ALPN protocol list to the given protocol names. Overwrites any existing configured protocols.",4,N],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"new","","Make a new ServerSession.  `config` controls how we behave in the TLS protocol.",20,[[["arc"]],["serversession"]]],[11,"get_sni_hostname","","Retrieves the SNI hostname, if any, used to select the certificate and private key.",20,[[["self"]],["option",["str"]]]],[11,"read_tls","","",20,[[["self"],["read"]],["result",["usize"]]]],[11,"write_tls","","Writes TLS messages to `wr`.",20,[[["self"],["write"]],["result",["usize"]]]],[11,"writev_tls","","",20,[[["self"],["writev"]],["result",["usize"]]]],[11,"process_new_packets","","",20,[[["self"]],["result",["tlserror"]]]],[11,"wants_read","","",20,[[["self"]],["bool"]]],[11,"wants_write","","",20,[[["self"]],["bool"]]],[11,"is_handshaking","","",20,[[["self"]],["bool"]]],[11,"set_buffer_limit","","",20,[[["self"],["usize"]]]],[11,"send_close_notify","","",20,[[["self"]]]],[11,"get_peer_certificates","","",20,[[["self"]],["option",["vec"]]]],[11,"get_alpn_protocol","","",20,[[["self"]],["option",["str"]]]],[11,"get_protocol_version","","",20,[[["self"]],["option",["protocolversion"]]]],[11,"export_keying_material","","",20,N],[11,"get_negotiated_ciphersuite","","",20,[[["self"]],["option",["supportedciphersuite"]]]],[11,"read","","Obtain plaintext data received from the peer over this TLS connection.",20,N],[11,"write","","Send the plaintext `buf` to the peer, encrypting and authenticating it.  Once this function succeeds you should call `write_tls` which will output the corresponding TLS records.",20,N],[11,"flush","","",20,[[["self"]],["result"]]],[11,"put","","",21,[[["self"],["vec",["u8"]],["vec",["u8"]]],["bool"]]],[11,"get","","",21,N],[11,"new","","Make a new ClientSessionMemoryCache.  `size` is the maximum number of stored sessions.",22,[[["usize"]],["arc",["clientsessionmemorycache"]]]],[11,"put","","",22,[[["self"],["vec",["u8"]],["vec",["u8"]]],["bool"]]],[11,"get","","",22,N],[11,"clone","","",3,[[["self"]],["clientconfig"]]],[11,"new","","Make a `ClientConfig` with a default set of ciphersuites, no root certificates, no ALPN protocols, and no client auth.",3,[[],["clientconfig"]]],[11,"set_protocols","","Set the ALPN protocol list to the given protocol names. Overwrites any existing configured protocols. The first element in the `protocols` list is the most preferred, the last is the least preferred.",3,N],[11,"set_persistence","","Sets persistence layer to `persist`.",3,[[["self"],["arc",["storesclientsessions"]]]]],[11,"set_mtu","","Sets MTU to `mtu`.  If None, the default is used. If Some(x) then x must be greater than 5 bytes.",3,[[["self"],["option"]]]],[11,"set_single_client_cert","","Sets a single client authentication certificate and private key. This is blindly used for all servers that ask for client auth.",3,[[["self"],["vec",["certificate"]],["privatekey"]]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"new","","Make a new ClientSession.  `config` controls how we behave in the TLS protocol, `hostname` is the hostname of who we want to talk to.",23,[[["arc"],["dnsnameref"]],["clientsession"]]],[11,"early_data","","Returns an `io::Write` implementor you can write bytes to to send TLS1.3 early data (a.k.a. \"0-RTT data\") to the server.",23,[[["self"]],["option",["writeearlydata"]]]],[11,"is_early_data_accepted","","Returns True if the server signalled it will process early data.",23,[[["self"]],["bool"]]],[11,"read_tls","","",23,[[["self"],["read"]],["result",["usize"]]]],[11,"write_tls","","Writes TLS messages to `wr`.",23,[[["self"],["write"]],["result",["usize"]]]],[11,"writev_tls","","",23,[[["self"],["writev"]],["result",["usize"]]]],[11,"process_new_packets","","",23,[[["self"]],["result",["tlserror"]]]],[11,"wants_read","","",23,[[["self"]],["bool"]]],[11,"wants_write","","",23,[[["self"]],["bool"]]],[11,"is_handshaking","","",23,[[["self"]],["bool"]]],[11,"set_buffer_limit","","",23,[[["self"],["usize"]]]],[11,"send_close_notify","","",23,[[["self"]]]],[11,"get_peer_certificates","","",23,[[["self"]],["option",["vec"]]]],[11,"get_alpn_protocol","","",23,[[["self"]],["option",["str"]]]],[11,"get_protocol_version","","",23,[[["self"]],["option",["protocolversion"]]]],[11,"export_keying_material","","",23,N],[11,"get_negotiated_ciphersuite","","",23,[[["self"]],["option",["supportedciphersuite"]]]],[11,"read","","Obtain plaintext data received from the peer over this TLS connection.",23,N],[11,"write","","Send the plaintext `buf` to the peer, encrypting and authenticating it.  Once this function succeeds you should call `write_tls` which will output the corresponding TLS records.",23,N],[11,"flush","","",23,[[["self"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"clone","","",7,[[["self"]],["privatekey"]]],[11,"eq","","",7,[[["self"],["privatekey"]],["bool"]]],[11,"ne","","",7,[[["self"],["privatekey"]],["bool"]]],[11,"clone","","",6,[[["self"]],["certificate"]]],[11,"eq","","",6,[[["self"],["certificate"]],["bool"]]],[11,"ne","","",6,[[["self"],["certificate"]],["bool"]]],[11,"as_ref","","",6,N],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"log","","",24,N],[11,"new","","Makes a new `KeyLogFile`.  The environment variable is inspected and the named file is opened during this call.",25,[[],["self"]]],[11,"log","","",25,N],[0,"internal","","Internal classes which may be useful outside the library. The contents of this section DO NOT form part of the stable interface.",N,N],[0,"pemfile","rustls::internal","Functions for parsing PEM files containing certificates/keys.",N,N],[5,"certs","rustls::internal::pemfile","Extract all the certificates from rd, and return a vec of `key::Certificate`s containing the der-format contents.",N,[[["bufread"]],["result",["vec"]]]],[5,"rsa_private_keys","","Extract all RSA private keys from rd, and return a vec of `key::PrivateKey`s containing the der-format contents.",N,[[["bufread"]],["result",["vec"]]]],[5,"pkcs8_private_keys","","Extract all PKCS8-encoded private keys from rd, and return a vec of `key::PrivateKey`s containing the der-format contents.",N,[[["bufread"]],["result",["vec"]]]],[0,"msgs","rustls::internal","Low-level TLS message parsing and encoding functions.",N,N],[0,"codec","rustls::internal::msgs","",N,N],[3,"Reader","rustls::internal::msgs::codec","Read from a byte slice.",N,N],[3,"u24","","",N,N],[12,"0","","",26,N],[5,"decode_u8","","",N,N],[5,"put_u16","","",N,N],[5,"decode_u16","","",N,N],[5,"decode_u32","","",N,N],[5,"put_u64","","",N,N],[5,"decode_u64","","",N,N],[5,"encode_vec_u8","","",N,N],[5,"encode_vec_u16","","",N,N],[5,"encode_vec_u24","","",N,N],[5,"read_vec_u8","","",N,[[["reader"]],["option",["vec"]]]],[5,"read_vec_u16","","",N,[[["reader"]],["option",["vec"]]]],[5,"read_vec_u24_limited","","",N,[[["reader"],["usize"]],["option",["vec"]]]],[8,"Codec","","Things we can encode and read from a Reader.",N,N],[10,"encode","","Encode yourself by appending onto `bytes`.",27,[[["self"],["vec"]]]],[10,"read","","Decode yourself by fiddling with the `Reader`. Return Some if it worked, None if not.",27,[[["reader"]],["option"]]],[11,"get_encoding","","Convenience function to get the results of `encode()`.",27,[[["self"]],["vec",["u8"]]]],[11,"read_bytes","","Read one of these from the front of `bytes` and return it.",27,N],[0,"base","rustls::internal::msgs","",N,N],[3,"Payload","rustls::internal::msgs::base","An externally length'd payload",N,N],[12,"0","","",28,N],[3,"PayloadU24","","An arbitrary, unknown-content, u24-length-prefixed payload",N,N],[12,"0","","",29,N],[3,"PayloadU16","","An arbitrary, unknown-content, u16-length-prefixed payload",N,N],[12,"0","","",30,N],[3,"PayloadU8","","An arbitrary, unknown-content, u8-length-prefixed payload",N,N],[12,"0","","",31,N],[0,"enums","rustls::internal::msgs","",N,N],[4,"ProtocolVersion","rustls::internal::msgs::enums","",N,N],[13,"SSLv2","","",8,N],[13,"SSLv3","","",8,N],[13,"TLSv1_0","","",8,N],[13,"TLSv1_1","","",8,N],[13,"TLSv1_2","","",8,N],[13,"TLSv1_3","","",8,N],[13,"Unknown","","",8,N],[4,"HashAlgorithm","","",N,N],[13,"NONE","","",32,N],[13,"MD5","","",32,N],[13,"SHA1","","",32,N],[13,"SHA224","","",32,N],[13,"SHA256","","",32,N],[13,"SHA384","","",32,N],[13,"SHA512","","",32,N],[13,"Unknown","","",32,N],[4,"SignatureAlgorithm","","",N,N],[13,"Anonymous","","",33,N],[13,"RSA","","",33,N],[13,"DSA","","",33,N],[13,"ECDSA","","",33,N],[13,"Unknown","","",33,N],[4,"ClientCertificateType","","",N,N],[13,"RSASign","","",34,N],[13,"DSSSign","","",34,N],[13,"RSAFixedDH","","",34,N],[13,"DSSFixedDH","","",34,N],[13,"RSAEphemeralDH","","",34,N],[13,"DSSEphemeralDH","","",34,N],[13,"FortezzaDMS","","",34,N],[13,"ECDSASign","","",34,N],[13,"RSAFixedECDH","","",34,N],[13,"ECDSAFixedECDH","","",34,N],[13,"Unknown","","",34,N],[4,"Compression","","",N,N],[13,"Null","","",35,N],[13,"Deflate","","",35,N],[13,"LSZ","","",35,N],[13,"Unknown","","",35,N],[4,"ContentType","","",N,N],[13,"ChangeCipherSpec","","",36,N],[13,"Alert","","",36,N],[13,"Handshake","","",36,N],[13,"ApplicationData","","",36,N],[13,"Heartbeat","","",36,N],[13,"Unknown","","",36,N],[4,"HandshakeType","","",N,N],[13,"HelloRequest","","",37,N],[13,"ClientHello","","",37,N],[13,"ServerHello","","",37,N],[13,"NewSessionTicket","","",37,N],[13,"EndOfEarlyData","","",37,N],[13,"HelloRetryRequest","","",37,N],[13,"EncryptedExtensions","","",37,N],[13,"Certificate","","",37,N],[13,"ServerKeyExchange","","",37,N],[13,"CertificateRequest","","",37,N],[13,"ServerHelloDone","","",37,N],[13,"CertificateVerify","","",37,N],[13,"ClientKeyExchange","","",37,N],[13,"Finished","","",37,N],[13,"CertificateURL","","",37,N],[13,"CertificateStatus","","",37,N],[13,"KeyUpdate","","",37,N],[13,"MessageHash","","",37,N],[13,"Unknown","","",37,N],[4,"AlertLevel","","",N,N],[13,"Warning","","",38,N],[13,"Fatal","","",38,N],[13,"Unknown","","",38,N],[4,"AlertDescription","","",N,N],[13,"CloseNotify","","",39,N],[13,"UnexpectedMessage","","",39,N],[13,"BadRecordMac","","",39,N],[13,"DecryptionFailed","","",39,N],[13,"RecordOverflow","","",39,N],[13,"DecompressionFailure","","",39,N],[13,"HandshakeFailure","","",39,N],[13,"NoCertificate","","",39,N],[13,"BadCertificate","","",39,N],[13,"UnsupportedCertificate","","",39,N],[13,"CertificateRevoked","","",39,N],[13,"CertificateExpired","","",39,N],[13,"CertificateUnknown","","",39,N],[13,"IllegalParameter","","",39,N],[13,"UnknownCA","","",39,N],[13,"AccessDenied","","",39,N],[13,"DecodeError","","",39,N],[13,"DecryptError","","",39,N],[13,"ExportRestriction","","",39,N],[13,"ProtocolVersion","","",39,N],[13,"InsufficientSecurity","","",39,N],[13,"InternalError","","",39,N],[13,"InappropriateFallback","","",39,N],[13,"UserCanceled","","",39,N],[13,"NoRenegotiation","","",39,N],[13,"MissingExtension","","",39,N],[13,"UnsupportedExtension","","",39,N],[13,"CertificateUnobtainable","","",39,N],[13,"UnrecognisedName","","",39,N],[13,"BadCertificateStatusResponse","","",39,N],[13,"BadCertificateHashValue","","",39,N],[13,"UnknownPSKIdentity","","",39,N],[13,"CertificateRequired","","",39,N],[13,"NoApplicationProtocol","","",39,N],[13,"Unknown","","",39,N],[4,"HeartbeatMessageType","","",N,N],[13,"Request","","",40,N],[13,"Response","","",40,N],[13,"Unknown","","",40,N],[4,"ExtensionType","","",N,N],[13,"ServerName","","",41,N],[13,"MaxFragmentLength","","",41,N],[13,"ClientCertificateUrl","","",41,N],[13,"TrustedCAKeys","","",41,N],[13,"TruncatedHMAC","","",41,N],[13,"StatusRequest","","",41,N],[13,"UserMapping","","",41,N],[13,"ClientAuthz","","",41,N],[13,"ServerAuthz","","",41,N],[13,"CertificateType","","",41,N],[13,"EllipticCurves","","",41,N],[13,"ECPointFormats","","",41,N],[13,"SRP","","",41,N],[13,"SignatureAlgorithms","","",41,N],[13,"UseSRTP","","",41,N],[13,"Heartbeat","","",41,N],[13,"ALProtocolNegotiation","","",41,N],[13,"SCT","","",41,N],[13,"Padding","","",41,N],[13,"ExtendedMasterSecret","","",41,N],[13,"SessionTicket","","",41,N],[13,"PreSharedKey","","",41,N],[13,"EarlyData","","",41,N],[13,"SupportedVersions","","",41,N],[13,"Cookie","","",41,N],[13,"PSKKeyExchangeModes","","",41,N],[13,"TicketEarlyDataInfo","","",41,N],[13,"CertificateAuthorities","","",41,N],[13,"OIDFilters","","",41,N],[13,"PostHandshakeAuth","","",41,N],[13,"SignatureAlgorithmsCert","","",41,N],[13,"KeyShare","","",41,N],[13,"NextProtocolNegotiation","","",41,N],[13,"ChannelId","","",41,N],[13,"RenegotiationInfo","","",41,N],[13,"TransportParameters","","",41,N],[13,"Unknown","","",41,N],[4,"ServerNameType","","",N,N],[13,"HostName","","",42,N],[13,"Unknown","","",42,N],[4,"NamedCurve","","",N,N],[13,"sect163k1","","",43,N],[13,"sect163r1","","",43,N],[13,"sect163r2","","",43,N],[13,"sect193r1","","",43,N],[13,"sect193r2","","",43,N],[13,"sect233k1","","",43,N],[13,"sect233r1","","",43,N],[13,"sect239k1","","",43,N],[13,"sect283k1","","",43,N],[13,"sect283r1","","",43,N],[13,"sect409k1","","",43,N],[13,"sect409r1","","",43,N],[13,"sect571k1","","",43,N],[13,"sect571r1","","",43,N],[13,"secp160k1","","",43,N],[13,"secp160r1","","",43,N],[13,"secp160r2","","",43,N],[13,"secp192k1","","",43,N],[13,"secp192r1","","",43,N],[13,"secp224k1","","",43,N],[13,"secp224r1","","",43,N],[13,"secp256k1","","",43,N],[13,"secp256r1","","",43,N],[13,"secp384r1","","",43,N],[13,"secp521r1","","",43,N],[13,"brainpoolp256r1","","",43,N],[13,"brainpoolp384r1","","",43,N],[13,"brainpoolp512r1","","",43,N],[13,"X25519","","",43,N],[13,"X448","","",43,N],[13,"arbitrary_explicit_prime_curves","","",43,N],[13,"arbitrary_explicit_char2_curves","","",43,N],[13,"Unknown","","",43,N],[4,"NamedGroup","","",N,N],[13,"secp256r1","","",44,N],[13,"secp384r1","","",44,N],[13,"secp521r1","","",44,N],[13,"X25519","","",44,N],[13,"X448","","",44,N],[13,"FFDHE2048","","",44,N],[13,"FFDHE3072","","",44,N],[13,"FFDHE4096","","",44,N],[13,"FFDHE6144","","",44,N],[13,"FFDHE8192","","",44,N],[13,"Unknown","","",44,N],[4,"CipherSuite","","",N,N],[13,"TLS_NULL_WITH_NULL_NULL","","",10,N],[13,"TLS_RSA_WITH_NULL_MD5","","",10,N],[13,"TLS_RSA_WITH_NULL_SHA","","",10,N],[13,"TLS_RSA_EXPORT_WITH_RC4_40_MD5","","",10,N],[13,"TLS_RSA_WITH_RC4_128_MD5","","",10,N],[13,"TLS_RSA_WITH_RC4_128_SHA","","",10,N],[13,"TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5","","",10,N],[13,"TLS_RSA_WITH_IDEA_CBC_SHA","","",10,N],[13,"TLS_RSA_EXPORT_WITH_DES40_CBC_SHA","","",10,N],[13,"TLS_RSA_WITH_DES_CBC_SHA","","",10,N],[13,"TLS_RSA_WITH_3DES_EDE_CBC_SHA","","",10,N],[13,"TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA","","",10,N],[13,"TLS_DH_DSS_WITH_DES_CBC_SHA","","",10,N],[13,"TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA","","",10,N],[13,"TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA","","",10,N],[13,"TLS_DH_RSA_WITH_DES_CBC_SHA","","",10,N],[13,"TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA","","",10,N],[13,"TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA","","",10,N],[13,"TLS_DHE_DSS_WITH_DES_CBC_SHA","","",10,N],[13,"TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA","","",10,N],[13,"TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA","","",10,N],[13,"TLS_DHE_RSA_WITH_DES_CBC_SHA","","",10,N],[13,"TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA","","",10,N],[13,"TLS_DH_anon_EXPORT_WITH_RC4_40_MD5","","",10,N],[13,"TLS_DH_anon_WITH_RC4_128_MD5","","",10,N],[13,"TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA","","",10,N],[13,"TLS_DH_anon_WITH_DES_CBC_SHA","","",10,N],[13,"TLS_DH_anon_WITH_3DES_EDE_CBC_SHA","","",10,N],[13,"SSL_FORTEZZA_KEA_WITH_NULL_SHA","","",10,N],[13,"SSL_FORTEZZA_KEA_WITH_FORTEZZA_CBC_SHA","","",10,N],[13,"TLS_KRB5_WITH_DES_CBC_SHA_or_SSL_FORTEZZA_KEA_WITH_RC4_128_SHA","","",10,N],[13,"TLS_KRB5_WITH_3DES_EDE_CBC_SHA","","",10,N],[13,"TLS_KRB5_WITH_RC4_128_SHA","","",10,N],[13,"TLS_KRB5_WITH_IDEA_CBC_SHA","","",10,N],[13,"TLS_KRB5_WITH_DES_CBC_MD5","","",10,N],[13,"TLS_KRB5_WITH_3DES_EDE_CBC_MD5","","",10,N],[13,"TLS_KRB5_WITH_RC4_128_MD5","","",10,N],[13,"TLS_KRB5_WITH_IDEA_CBC_MD5","","",10,N],[13,"TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA","","",10,N],[13,"TLS_KRB5_EXPORT_WITH_RC2_CBC_40_SHA","","",10,N],[13,"TLS_KRB5_EXPORT_WITH_RC4_40_SHA","","",10,N],[13,"TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5","","",10,N],[13,"TLS_KRB5_EXPORT_WITH_RC2_CBC_40_MD5","","",10,N],[13,"TLS_KRB5_EXPORT_WITH_RC4_40_MD5","","",10,N],[13,"TLS_PSK_WITH_NULL_SHA","","",10,N],[13,"TLS_DHE_PSK_WITH_NULL_SHA","","",10,N],[13,"TLS_RSA_PSK_WITH_NULL_SHA","","",10,N],[13,"TLS_RSA_WITH_AES_128_CBC_SHA","","",10,N],[13,"TLS_DH_DSS_WITH_AES_128_CBC_SHA","","",10,N],[13,"TLS_DH_RSA_WITH_AES_128_CBC_SHA","","",10,N],[13,"TLS_DHE_DSS_WITH_AES_128_CBC_SHA","","",10,N],[13,"TLS_DHE_RSA_WITH_AES_128_CBC_SHA","","",10,N],[13,"TLS_DH_anon_WITH_AES_128_CBC_SHA","","",10,N],[13,"TLS_RSA_WITH_AES_256_CBC_SHA","","",10,N],[13,"TLS_DH_DSS_WITH_AES_256_CBC_SHA","","",10,N],[13,"TLS_DH_RSA_WITH_AES_256_CBC_SHA","","",10,N],[13,"TLS_DHE_DSS_WITH_AES_256_CBC_SHA","","",10,N],[13,"TLS_DHE_RSA_WITH_AES_256_CBC_SHA","","",10,N],[13,"TLS_DH_anon_WITH_AES_256_CBC_SHA","","",10,N],[13,"TLS_RSA_WITH_NULL_SHA256","","",10,N],[13,"TLS_RSA_WITH_AES_128_CBC_SHA256","","",10,N],[13,"TLS_RSA_WITH_AES_256_CBC_SHA256","","",10,N],[13,"TLS_DH_DSS_WITH_AES_128_CBC_SHA256","","",10,N],[13,"TLS_DH_RSA_WITH_AES_128_CBC_SHA256","","",10,N],[13,"TLS_DHE_DSS_WITH_AES_128_CBC_SHA256","","",10,N],[13,"TLS_RSA_WITH_CAMELLIA_128_CBC_SHA","","",10,N],[13,"TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA","","",10,N],[13,"TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA","","",10,N],[13,"TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA","","",10,N],[13,"TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA","","",10,N],[13,"TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA","","",10,N],[13,"TLS_ECDH_ECDSA_WITH_NULL_SHA_draft","","",10,N],[13,"TLS_ECDH_ECDSA_WITH_RC4_128_SHA_draft","","",10,N],[13,"TLS_ECDH_ECDSA_WITH_DES_CBC_SHA_draft","","",10,N],[13,"TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA_draft","","",10,N],[13,"TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA_draft","","",10,N],[13,"TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA_draft","","",10,N],[13,"TLS_ECDH_ECNRA_WITH_DES_CBC_SHA_draft","","",10,N],[13,"TLS_ECDH_ECNRA_WITH_3DES_EDE_CBC_SHA_draft","","",10,N],[13,"TLS_ECMQV_ECDSA_NULL_SHA_draft","","",10,N],[13,"TLS_ECMQV_ECDSA_WITH_RC4_128_SHA_draft","","",10,N],[13,"TLS_ECMQV_ECDSA_WITH_DES_CBC_SHA_draft","","",10,N],[13,"TLS_ECMQV_ECDSA_WITH_3DES_EDE_CBC_SHA_draft","","",10,N],[13,"TLS_ECMQV_ECNRA_NULL_SHA_draft","","",10,N],[13,"TLS_ECMQV_ECNRA_WITH_RC4_128_SHA_draft","","",10,N],[13,"TLS_ECMQV_ECNRA_WITH_DES_CBC_SHA_draft","","",10,N],[13,"TLS_ECMQV_ECNRA_WITH_3DES_EDE_CBC_SHA_draft","","",10,N],[13,"TLS_ECDH_anon_NULL_WITH_SHA_draft","","",10,N],[13,"TLS_ECDH_anon_WITH_RC4_128_SHA_draft","","",10,N],[13,"TLS_ECDH_anon_WITH_DES_CBC_SHA_draft","","",10,N],[13,"TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA_draft","","",10,N],[13,"TLS_ECDH_anon_EXPORT_WITH_DES40_CBC_SHA_draft","","",10,N],[13,"TLS_ECDH_anon_EXPORT_WITH_RC4_40_SHA_draft","","",10,N],[13,"TLS_RSA_EXPORT1024_WITH_RC4_56_MD5","","",10,N],[13,"TLS_RSA_EXPORT1024_WITH_RC2_CBC_56_MD5","","",10,N],[13,"TLS_RSA_EXPORT1024_WITH_DES_CBC_SHA","","",10,N],[13,"TLS_DHE_DSS_EXPORT1024_WITH_DES_CBC_SHA","","",10,N],[13,"TLS_RSA_EXPORT1024_WITH_RC4_56_SHA","","",10,N],[13,"TLS_DHE_DSS_EXPORT1024_WITH_RC4_56_SHA","","",10,N],[13,"TLS_DHE_DSS_WITH_RC4_128_SHA","","",10,N],[13,"TLS_DHE_RSA_WITH_AES_128_CBC_SHA256","","",10,N],[13,"TLS_DH_DSS_WITH_AES_256_CBC_SHA256","","",10,N],[13,"TLS_DH_RSA_WITH_AES_256_CBC_SHA256","","",10,N],[13,"TLS_DHE_DSS_WITH_AES_256_CBC_SHA256","","",10,N],[13,"TLS_DHE_RSA_WITH_AES_256_CBC_SHA256","","",10,N],[13,"TLS_DH_anon_WITH_AES_128_CBC_SHA256","","",10,N],[13,"TLS_DH_anon_WITH_AES_256_CBC_SHA256","","",10,N],[13,"TLS_DHE_DSS_WITH_3DES_EDE_CBC_RMD","","",10,N],[13,"TLS_DHE_DSS_WITH_AES_128_CBC_RMD","","",10,N],[13,"TLS_DHE_DSS_WITH_AES_256_CBC_RMD","","",10,N],[13,"TLS_DHE_RSA_WITH_3DES_EDE_CBC_RMD","","",10,N],[13,"TLS_DHE_RSA_WITH_AES_128_CBC_RMD","","",10,N],[13,"TLS_DHE_RSA_WITH_AES_256_CBC_RMD","","",10,N],[13,"TLS_RSA_WITH_3DES_EDE_CBC_RMD","","",10,N],[13,"TLS_RSA_WITH_AES_128_CBC_RMD","","",10,N],[13,"TLS_RSA_WITH_AES_256_CBC_RMD","","",10,N],[13,"TLS_GOSTR341094_WITH_28147_CNT_IMIT","","",10,N],[13,"TLS_GOSTR341001_WITH_28147_CNT_IMIT","","",10,N],[13,"TLS_GOSTR341094_WITH_NULL_GOSTR3411","","",10,N],[13,"TLS_GOSTR341001_WITH_NULL_GOSTR3411","","",10,N],[13,"TLS_RSA_WITH_CAMELLIA_256_CBC_SHA","","",10,N],[13,"TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA","","",10,N],[13,"TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA","","",10,N],[13,"TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA","","",10,N],[13,"TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA","","",10,N],[13,"TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA","","",10,N],[13,"TLS_PSK_WITH_RC4_128_SHA","","",10,N],[13,"TLS_PSK_WITH_3DES_EDE_CBC_SHA","","",10,N],[13,"TLS_PSK_WITH_AES_128_CBC_SHA","","",10,N],[13,"TLS_PSK_WITH_AES_256_CBC_SHA","","",10,N],[13,"TLS_DHE_PSK_WITH_RC4_128_SHA","","",10,N],[13,"TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA","","",10,N],[13,"TLS_DHE_PSK_WITH_AES_128_CBC_SHA","","",10,N],[13,"TLS_DHE_PSK_WITH_AES_256_CBC_SHA","","",10,N],[13,"TLS_RSA_PSK_WITH_RC4_128_SHA","","",10,N],[13,"TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA","","",10,N],[13,"TLS_RSA_PSK_WITH_AES_128_CBC_SHA","","",10,N],[13,"TLS_RSA_PSK_WITH_AES_256_CBC_SHA","","",10,N],[13,"TLS_RSA_WITH_SEED_CBC_SHA","","",10,N],[13,"TLS_DH_DSS_WITH_SEED_CBC_SHA","","",10,N],[13,"TLS_DH_RSA_WITH_SEED_CBC_SHA","","",10,N],[13,"TLS_DHE_DSS_WITH_SEED_CBC_SHA","","",10,N],[13,"TLS_DHE_RSA_WITH_SEED_CBC_SHA","","",10,N],[13,"TLS_DH_anon_WITH_SEED_CBC_SHA","","",10,N],[13,"TLS_RSA_WITH_AES_128_GCM_SHA256","","",10,N],[13,"TLS_RSA_WITH_AES_256_GCM_SHA384","","",10,N],[13,"TLS_DHE_RSA_WITH_AES_128_GCM_SHA256","","",10,N],[13,"TLS_DHE_RSA_WITH_AES_256_GCM_SHA384","","",10,N],[13,"TLS_DH_RSA_WITH_AES_128_GCM_SHA256","","",10,N],[13,"TLS_DH_RSA_WITH_AES_256_GCM_SHA384","","",10,N],[13,"TLS_DHE_DSS_WITH_AES_128_GCM_SHA256","","",10,N],[13,"TLS_DHE_DSS_WITH_AES_256_GCM_SHA384","","",10,N],[13,"TLS_DH_DSS_WITH_AES_128_GCM_SHA256","","",10,N],[13,"TLS_DH_DSS_WITH_AES_256_GCM_SHA384","","",10,N],[13,"TLS_DH_anon_WITH_AES_128_GCM_SHA256","","",10,N],[13,"TLS_DH_anon_WITH_AES_256_GCM_SHA384","","",10,N],[13,"TLS_PSK_WITH_AES_128_GCM_SHA256","","",10,N],[13,"TLS_PSK_WITH_AES_256_GCM_SHA384","","",10,N],[13,"TLS_DHE_PSK_WITH_AES_128_GCM_SHA256","","",10,N],[13,"TLS_DHE_PSK_WITH_AES_256_GCM_SHA384","","",10,N],[13,"TLS_RSA_PSK_WITH_AES_128_GCM_SHA256","","",10,N],[13,"TLS_RSA_PSK_WITH_AES_256_GCM_SHA384","","",10,N],[13,"TLS_PSK_WITH_AES_128_CBC_SHA256","","",10,N],[13,"TLS_PSK_WITH_AES_256_CBC_SHA384","","",10,N],[13,"TLS_PSK_WITH_NULL_SHA256","","",10,N],[13,"TLS_PSK_WITH_NULL_SHA384","","",10,N],[13,"TLS_DHE_PSK_WITH_AES_128_CBC_SHA256","","",10,N],[13,"TLS_DHE_PSK_WITH_AES_256_CBC_SHA384","","",10,N],[13,"TLS_DHE_PSK_WITH_NULL_SHA256","","",10,N],[13,"TLS_DHE_PSK_WITH_NULL_SHA384","","",10,N],[13,"TLS_RSA_PSK_WITH_AES_128_CBC_SHA256","","",10,N],[13,"TLS_RSA_PSK_WITH_AES_256_CBC_SHA384","","",10,N],[13,"TLS_RSA_PSK_WITH_NULL_SHA256","","",10,N],[13,"TLS_RSA_PSK_WITH_NULL_SHA384","","",10,N],[13,"TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256","","",10,N],[13,"TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256","","",10,N],[13,"TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256","","",10,N],[13,"TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256","","",10,N],[13,"TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256","","",10,N],[13,"TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA256","","",10,N],[13,"TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256","","",10,N],[13,"TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256","","",10,N],[13,"TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256","","",10,N],[13,"TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256","","",10,N],[13,"TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256","","",10,N],[13,"TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA256","","",10,N],[13,"TLS_EMPTY_RENEGOTIATION_INFO_SCSV","","",10,N],[13,"TLS13_AES_128_GCM_SHA256","","",10,N],[13,"TLS13_AES_256_GCM_SHA384","","",10,N],[13,"TLS13_CHACHA20_POLY1305_SHA256","","",10,N],[13,"TLS13_AES_128_CCM_SHA256","","",10,N],[13,"TLS13_AES_128_CCM_8_SHA256","","",10,N],[13,"TLS_ECDH_ECDSA_WITH_NULL_SHA","","",10,N],[13,"TLS_ECDH_ECDSA_WITH_RC4_128_SHA","","",10,N],[13,"TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA","","",10,N],[13,"TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA","","",10,N],[13,"TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA","","",10,N],[13,"TLS_ECDHE_ECDSA_WITH_NULL_SHA","","",10,N],[13,"TLS_ECDHE_ECDSA_WITH_RC4_128_SHA","","",10,N],[13,"TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA","","",10,N],[13,"TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA","","",10,N],[13,"TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA","","",10,N],[13,"TLS_ECDH_RSA_WITH_NULL_SHA","","",10,N],[13,"TLS_ECDH_RSA_WITH_RC4_128_SHA","","",10,N],[13,"TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA","","",10,N],[13,"TLS_ECDH_RSA_WITH_AES_128_CBC_SHA","","",10,N],[13,"TLS_ECDH_RSA_WITH_AES_256_CBC_SHA","","",10,N],[13,"TLS_ECDHE_RSA_WITH_NULL_SHA","","",10,N],[13,"TLS_ECDHE_RSA_WITH_RC4_128_SHA","","",10,N],[13,"TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA","","",10,N],[13,"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA","","",10,N],[13,"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA","","",10,N],[13,"TLS_ECDH_anon_WITH_NULL_SHA","","",10,N],[13,"TLS_ECDH_anon_WITH_RC4_128_SHA","","",10,N],[13,"TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA","","",10,N],[13,"TLS_ECDH_anon_WITH_AES_128_CBC_SHA","","",10,N],[13,"TLS_ECDH_anon_WITH_AES_256_CBC_SHA","","",10,N],[13,"TLS_SRP_SHA_WITH_3DES_EDE_CBC_SHA","","",10,N],[13,"TLS_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA","","",10,N],[13,"TLS_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA","","",10,N],[13,"TLS_SRP_SHA_WITH_AES_128_CBC_SHA","","",10,N],[13,"TLS_SRP_SHA_RSA_WITH_AES_128_CBC_SHA","","",10,N],[13,"TLS_SRP_SHA_DSS_WITH_AES_128_CBC_SHA","","",10,N],[13,"TLS_SRP_SHA_WITH_AES_256_CBC_SHA","","",10,N],[13,"TLS_SRP_SHA_RSA_WITH_AES_256_CBC_SHA","","",10,N],[13,"TLS_SRP_SHA_DSS_WITH_AES_256_CBC_SHA","","",10,N],[13,"TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256","","",10,N],[13,"TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384","","",10,N],[13,"TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256","","",10,N],[13,"TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384","","",10,N],[13,"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256","","",10,N],[13,"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384","","",10,N],[13,"TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256","","",10,N],[13,"TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384","","",10,N],[13,"TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256","","",10,N],[13,"TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384","","",10,N],[13,"TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256","","",10,N],[13,"TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384","","",10,N],[13,"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256","","",10,N],[13,"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384","","",10,N],[13,"TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256","","",10,N],[13,"TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384","","",10,N],[13,"TLS_ECDHE_PSK_WITH_RC4_128_SHA","","",10,N],[13,"TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA","","",10,N],[13,"TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA","","",10,N],[13,"TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA","","",10,N],[13,"TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256","","",10,N],[13,"TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384","","",10,N],[13,"TLS_ECDHE_PSK_WITH_NULL_SHA","","",10,N],[13,"TLS_ECDHE_PSK_WITH_NULL_SHA256","","",10,N],[13,"TLS_ECDHE_PSK_WITH_NULL_SHA384","","",10,N],[13,"TLS_RSA_WITH_ARIA_128_CBC_SHA256","","",10,N],[13,"TLS_RSA_WITH_ARIA_256_CBC_SHA384","","",10,N],[13,"TLS_DH_DSS_WITH_ARIA_128_CBC_SHA256","","",10,N],[13,"TLS_DH_DSS_WITH_ARIA_256_CBC_SHA384","","",10,N],[13,"TLS_DH_RSA_WITH_ARIA_128_CBC_SHA256","","",10,N],[13,"TLS_DH_RSA_WITH_ARIA_256_CBC_SHA384","","",10,N],[13,"TLS_DHE_DSS_WITH_ARIA_128_CBC_SHA256","","",10,N],[13,"TLS_DHE_DSS_WITH_ARIA_256_CBC_SHA384","","",10,N],[13,"TLS_DHE_RSA_WITH_ARIA_128_CBC_SHA256","","",10,N],[13,"TLS_DHE_RSA_WITH_ARIA_256_CBC_SHA384","","",10,N],[13,"TLS_DH_anon_WITH_ARIA_128_CBC_SHA256","","",10,N],[13,"TLS_DH_anon_WITH_ARIA_256_CBC_SHA384","","",10,N],[13,"TLS_ECDHE_ECDSA_WITH_ARIA_128_CBC_SHA256","","",10,N],[13,"TLS_ECDHE_ECDSA_WITH_ARIA_256_CBC_SHA384","","",10,N],[13,"TLS_ECDH_ECDSA_WITH_ARIA_128_CBC_SHA256","","",10,N],[13,"TLS_ECDH_ECDSA_WITH_ARIA_256_CBC_SHA384","","",10,N],[13,"TLS_ECDHE_RSA_WITH_ARIA_128_CBC_SHA256","","",10,N],[13,"TLS_ECDHE_RSA_WITH_ARIA_256_CBC_SHA384","","",10,N],[13,"TLS_ECDH_RSA_WITH_ARIA_128_CBC_SHA256","","",10,N],[13,"TLS_ECDH_RSA_WITH_ARIA_256_CBC_SHA384","","",10,N],[13,"TLS_RSA_WITH_ARIA_128_GCM_SHA256","","",10,N],[13,"TLS_RSA_WITH_ARIA_256_GCM_SHA384","","",10,N],[13,"TLS_DHE_RSA_WITH_ARIA_128_GCM_SHA256","","",10,N],[13,"TLS_DHE_RSA_WITH_ARIA_256_GCM_SHA384","","",10,N],[13,"TLS_DH_RSA_WITH_ARIA_128_GCM_SHA256","","",10,N],[13,"TLS_DH_RSA_WITH_ARIA_256_GCM_SHA384","","",10,N],[13,"TLS_DHE_DSS_WITH_ARIA_128_GCM_SHA256","","",10,N],[13,"TLS_DHE_DSS_WITH_ARIA_256_GCM_SHA384","","",10,N],[13,"TLS_DH_DSS_WITH_ARIA_128_GCM_SHA256","","",10,N],[13,"TLS_DH_DSS_WITH_ARIA_256_GCM_SHA384","","",10,N],[13,"TLS_DH_anon_WITH_ARIA_128_GCM_SHA256","","",10,N],[13,"TLS_DH_anon_WITH_ARIA_256_GCM_SHA384","","",10,N],[13,"TLS_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256","","",10,N],[13,"TLS_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384","","",10,N],[13,"TLS_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256","","",10,N],[13,"TLS_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384","","",10,N],[13,"TLS_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256","","",10,N],[13,"TLS_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384","","",10,N],[13,"TLS_ECDH_RSA_WITH_ARIA_128_GCM_SHA256","","",10,N],[13,"TLS_ECDH_RSA_WITH_ARIA_256_GCM_SHA384","","",10,N],[13,"TLS_PSK_WITH_ARIA_128_CBC_SHA256","","",10,N],[13,"TLS_PSK_WITH_ARIA_256_CBC_SHA384","","",10,N],[13,"TLS_DHE_PSK_WITH_ARIA_128_CBC_SHA256","","",10,N],[13,"TLS_DHE_PSK_WITH_ARIA_256_CBC_SHA384","","",10,N],[13,"TLS_RSA_PSK_WITH_ARIA_128_CBC_SHA256","","",10,N],[13,"TLS_RSA_PSK_WITH_ARIA_256_CBC_SHA384","","",10,N],[13,"TLS_PSK_WITH_ARIA_128_GCM_SHA256","","",10,N],[13,"TLS_PSK_WITH_ARIA_256_GCM_SHA384","","",10,N],[13,"TLS_DHE_PSK_WITH_ARIA_128_GCM_SHA256","","",10,N],[13,"TLS_DHE_PSK_WITH_ARIA_256_GCM_SHA384","","",10,N],[13,"TLS_RSA_PSK_WITH_ARIA_128_GCM_SHA256","","",10,N],[13,"TLS_RSA_PSK_WITH_ARIA_256_GCM_SHA384","","",10,N],[13,"TLS_ECDHE_PSK_WITH_ARIA_128_CBC_SHA256","","",10,N],[13,"TLS_ECDHE_PSK_WITH_ARIA_256_CBC_SHA384","","",10,N],[13,"TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256","","",10,N],[13,"TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384","","",10,N],[13,"TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256","","",10,N],[13,"TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384","","",10,N],[13,"TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256","","",10,N],[13,"TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384","","",10,N],[13,"TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256","","",10,N],[13,"TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384","","",10,N],[13,"TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256","","",10,N],[13,"TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384","","",10,N],[13,"TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256","","",10,N],[13,"TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384","","",10,N],[13,"TLS_DH_RSA_WITH_CAMELLIA_128_GCM_SHA256","","",10,N],[13,"TLS_DH_RSA_WITH_CAMELLIA_256_GCM_SHA384","","",10,N],[13,"TLS_DHE_DSS_WITH_CAMELLIA_128_GCM_SHA256","","",10,N],[13,"TLS_DHE_DSS_WITH_CAMELLIA_256_GCM_SHA384","","",10,N],[13,"TLS_DH_DSS_WITH_CAMELLIA_128_GCM_SHA256","","",10,N],[13,"TLS_DH_DSS_WITH_CAMELLIA_256_GCM_SHA384","","",10,N],[13,"TLS_DH_anon_WITH_CAMELLIA_128_GCM_SHA256","","",10,N],[13,"TLS_DH_anon_WITH_CAMELLIA_256_GCM_SHA384","","",10,N],[13,"TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256","","",10,N],[13,"TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384","","",10,N],[13,"TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256","","",10,N],[13,"TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384","","",10,N],[13,"TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256","","",10,N],[13,"TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384","","",10,N],[13,"TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256","","",10,N],[13,"TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384","","",10,N],[13,"TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256","","",10,N],[13,"TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384","","",10,N],[13,"TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256","","",10,N],[13,"TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384","","",10,N],[13,"TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256","","",10,N],[13,"TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384","","",10,N],[13,"TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256","","",10,N],[13,"TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384","","",10,N],[13,"TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256","","",10,N],[13,"TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384","","",10,N],[13,"TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256","","",10,N],[13,"TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384","","",10,N],[13,"TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256","","",10,N],[13,"TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384","","",10,N],[13,"TLS_RSA_WITH_AES_128_CCM","","",10,N],[13,"TLS_RSA_WITH_AES_256_CCM","","",10,N],[13,"TLS_DHE_RSA_WITH_AES_128_CCM","","",10,N],[13,"TLS_DHE_RSA_WITH_AES_256_CCM","","",10,N],[13,"TLS_RSA_WITH_AES_128_CCM_8","","",10,N],[13,"TLS_RSA_WITH_AES_256_CCM_8","","",10,N],[13,"TLS_DHE_RSA_WITH_AES_128_CCM_8","","",10,N],[13,"TLS_DHE_RSA_WITH_AES_256_CCM_8","","",10,N],[13,"TLS_PSK_WITH_AES_128_CCM","","",10,N],[13,"TLS_PSK_WITH_AES_256_CCM","","",10,N],[13,"TLS_DHE_PSK_WITH_AES_128_CCM","","",10,N],[13,"TLS_DHE_PSK_WITH_AES_256_CCM","","",10,N],[13,"TLS_PSK_WITH_AES_128_CCM_8","","",10,N],[13,"TLS_PSK_WITH_AES_256_CCM_8","","",10,N],[13,"TLS_PSK_DHE_WITH_AES_128_CCM_8","","",10,N],[13,"TLS_PSK_DHE_WITH_AES_256_CCM_8","","",10,N],[13,"TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256","","",10,N],[13,"TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256","","",10,N],[13,"TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256","","",10,N],[13,"TLS_PSK_WITH_CHACHA20_POLY1305_SHA256","","",10,N],[13,"TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256","","",10,N],[13,"TLS_DHE_PSK_WITH_CHACHA20_POLY1305_SHA256","","",10,N],[13,"TLS_RSA_PSK_WITH_CHACHA20_POLY1305_SHA256","","",10,N],[13,"SSL_RSA_FIPS_WITH_DES_CBC_SHA","","",10,N],[13,"SSL_RSA_FIPS_WITH_3DES_EDE_CBC_SHA","","",10,N],[13,"Unknown","","",10,N],[4,"ECPointFormat","","",N,N],[13,"Uncompressed","","",45,N],[13,"ANSIX962CompressedPrime","","",45,N],[13,"ANSIX962CompressedChar2","","",45,N],[13,"Unknown","","",45,N],[4,"HeartbeatMode","","",N,N],[13,"PeerAllowedToSend","","",46,N],[13,"PeerNotAllowedToSend","","",46,N],[13,"Unknown","","",46,N],[4,"ECCurveType","","",N,N],[13,"ExplicitPrime","","",47,N],[13,"ExplicitChar2","","",47,N],[13,"NamedCurve","","",47,N],[13,"Unknown","","",47,N],[4,"SignatureScheme","","",N,N],[13,"RSA_PKCS1_SHA1","","",9,N],[13,"ECDSA_SHA1_Legacy","","",9,N],[13,"RSA_PKCS1_SHA256","","",9,N],[13,"ECDSA_NISTP256_SHA256","","",9,N],[13,"RSA_PKCS1_SHA384","","",9,N],[13,"ECDSA_NISTP384_SHA384","","",9,N],[13,"RSA_PKCS1_SHA512","","",9,N],[13,"ECDSA_NISTP521_SHA512","","",9,N],[13,"RSA_PSS_SHA256","","",9,N],[13,"RSA_PSS_SHA384","","",9,N],[13,"RSA_PSS_SHA512","","",9,N],[13,"ED25519","","",9,N],[13,"ED448","","",9,N],[13,"Unknown","","",9,N],[4,"PSKKeyExchangeMode","","",N,N],[13,"PSK_KE","","",48,N],[13,"PSK_DHE_KE","","",48,N],[13,"Unknown","","",48,N],[4,"KeyUpdateRequest","","",N,N],[13,"UpdateNotRequested","","",49,N],[13,"UpdateRequested","","",49,N],[13,"Unknown","","",49,N],[4,"CertificateStatusType","","",N,N],[13,"OCSP","","",50,N],[13,"Unknown","","",50,N],[0,"alert","rustls::internal::msgs","",N,N],[3,"AlertMessagePayload","rustls::internal::msgs::alert","",N,N],[12,"level","","",51,N],[12,"description","","",51,N],[0,"handshake","rustls::internal::msgs","",N,N],[3,"Random","rustls::internal::msgs::handshake","",N,N],[3,"SessionID","","",N,N],[3,"UnknownExtension","","",N,N],[12,"typ","","",52,N],[12,"payload","","",52,N],[3,"ServerName","","",N,N],[12,"typ","","",53,N],[12,"payload","","",53,N],[3,"KeyShareEntry","","",N,N],[12,"group","","",54,N],[12,"payload","","",54,N],[3,"PresharedKeyIdentity","","",N,N],[12,"identity","","",55,N],[12,"obfuscated_ticket_age","","",55,N],[3,"PresharedKeyOffer","","",N,N],[12,"identities","","",56,N],[12,"binders","","",56,N],[3,"OCSPCertificateStatusRequest","","",N,N],[12,"responder_ids","","",57,N],[12,"extensions","","",57,N],[3,"ClientHelloPayload","","",N,N],[12,"client_version","","",58,N],[12,"random","","",58,N],[12,"session_id","","",58,N],[12,"cipher_suites","","",58,N],[12,"compression_methods","","",58,N],[12,"extensions","","",58,N],[3,"HelloRetryRequest","","",N,N],[12,"legacy_version","","",59,N],[12,"session_id","","",59,N],[12,"cipher_suite","","",59,N],[12,"extensions","","",59,N],[3,"ServerHelloPayload","","",N,N],[12,"legacy_version","","",60,N],[12,"random","","",60,N],[12,"session_id","","",60,N],[12,"cipher_suite","","",60,N],[12,"compression_method","","",60,N],[12,"extensions","","",60,N],[3,"CertificateEntry","","",N,N],[12,"cert","","",61,N],[12,"exts","","",61,N],[3,"CertificatePayloadTLS13","","",N,N],[12,"context","","",62,N],[12,"list","","",62,N],[3,"ECParameters","","",N,N],[12,"curve_type","","",63,N],[12,"named_group","","",63,N],[3,"DigitallySignedStruct","","",N,N],[12,"scheme","","",64,N],[12,"sig","","",64,N],[3,"ClientECDHParams","","",N,N],[12,"public","","",65,N],[3,"ServerECDHParams","","",N,N],[12,"curve_params","","",66,N],[12,"public","","",66,N],[3,"ECDHEServerKeyExchange","","",N,N],[12,"params","","",67,N],[12,"dss","","",67,N],[3,"CertificateRequestPayload","","",N,N],[12,"certtypes","","",68,N],[12,"sigschemes","","",68,N],[12,"canames","","",68,N],[3,"CertificateRequestPayloadTLS13","","",N,N],[12,"context","","",69,N],[12,"extensions","","",69,N],[3,"NewSessionTicketPayload","","",N,N],[12,"lifetime_hint","","",70,N],[12,"ticket","","",70,N],[3,"NewSessionTicketPayloadTLS13","","",N,N],[12,"lifetime","","",71,N],[12,"age_add","","",71,N],[12,"nonce","","",71,N],[12,"ticket","","",71,N],[12,"exts","","",71,N],[3,"CertificateStatus","","Only supports OCSP",N,N],[12,"ocsp_response","","",72,N],[3,"HandshakeMessagePayload","","",N,N],[12,"typ","","",73,N],[12,"payload","","",73,N],[4,"ServerNamePayload","","",N,N],[13,"HostName","","",74,N],[13,"Unknown","","",74,N],[4,"CertificateStatusRequest","","",N,N],[13,"OCSP","","",75,N],[13,"Unknown","","",75,N],[4,"ClientExtension","","",N,N],[13,"ECPointFormats","","",76,N],[13,"NamedGroups","","",76,N],[13,"SignatureAlgorithms","","",76,N],[13,"ServerName","","",76,N],[13,"SessionTicketRequest","","",76,N],[13,"SessionTicketOffer","","",76,N],[13,"Protocols","","",76,N],[13,"SupportedVersions","","",76,N],[13,"KeyShare","","",76,N],[13,"PresharedKeyModes","","",76,N],[13,"PresharedKey","","",76,N],[13,"Cookie","","",76,N],[13,"ExtendedMasterSecretRequest","","",76,N],[13,"CertificateStatusRequest","","",76,N],[13,"SignedCertificateTimestampRequest","","",76,N],[13,"TransportParameters","","",76,N],[13,"EarlyData","","",76,N],[13,"Unknown","","",76,N],[4,"ServerExtension","","",N,N],[13,"ECPointFormats","","",77,N],[13,"ServerNameAck","","",77,N],[13,"SessionTicketAck","","",77,N],[13,"RenegotiationInfo","","",77,N],[13,"Protocols","","",77,N],[13,"KeyShare","","",77,N],[13,"PresharedKey","","",77,N],[13,"ExtendedMasterSecretAck","","",77,N],[13,"CertificateStatusAck","","",77,N],[13,"SignedCertificateTimestamp","","",77,N],[13,"SupportedVersions","","",77,N],[13,"TransportParameters","","",77,N],[13,"EarlyData","","",77,N],[13,"Unknown","","",77,N],[4,"HelloRetryExtension","","",N,N],[13,"KeyShare","","",78,N],[13,"Cookie","","",78,N],[13,"SupportedVersions","","",78,N],[13,"Unknown","","",78,N],[4,"CertificateExtension","","",N,N],[13,"CertificateStatus","","",79,N],[13,"SignedCertificateTimestamp","","",79,N],[13,"Unknown","","",79,N],[4,"KeyExchangeAlgorithm","","",N,N],[13,"BulkOnly","","",80,N],[13,"DH","","",80,N],[13,"DHE","","",80,N],[13,"RSA","","",80,N],[13,"ECDH","","",80,N],[13,"ECDHE","","",80,N],[4,"ServerKeyExchangePayload","","",N,N],[13,"ECDHE","","",81,N],[13,"Unknown","","",81,N],[4,"CertReqExtension","","",N,N],[13,"SignatureAlgorithms","","",82,N],[13,"AuthorityNames","","",82,N],[13,"Unknown","","",82,N],[4,"NewSessionTicketExtension","","",N,N],[13,"EarlyData","","",83,N],[13,"Unknown","","",83,N],[4,"HandshakePayload","","",N,N],[13,"HelloRequest","","",84,N],[13,"ClientHello","","",84,N],[13,"ServerHello","","",84,N],[13,"HelloRetryRequest","","",84,N],[13,"Certificate","","",84,N],[13,"CertificateTLS13","","",84,N],[13,"ServerKeyExchange","","",84,N],[13,"CertificateRequest","","",84,N],[13,"CertificateRequestTLS13","","",84,N],[13,"CertificateVerify","","",84,N],[13,"ServerHelloDone","","",84,N],[13,"EarlyData","","",84,N],[13,"EndOfEarlyData","","",84,N],[13,"ClientKeyExchange","","",84,N],[13,"NewSessionTicket","","",84,N],[13,"NewSessionTicketTLS13","","",84,N],[13,"EncryptedExtensions","","",84,N],[13,"KeyUpdate","","",84,N],[13,"Finished","","",84,N],[13,"CertificateStatus","","",84,N],[13,"MessageHash","","",84,N],[13,"Unknown","","",84,N],[6,"VecU16OfPayloadU8","","",N,N],[6,"VecU16OfPayloadU16","","",N,N],[6,"ECPointFormatList","","",N,N],[6,"NamedGroups","","",N,N],[6,"SupportedSignatureSchemes","","",N,N],[6,"ServerNameRequest","","",N,N],[6,"ProtocolNameList","","",N,N],[6,"PresharedKeyIdentities","","",N,N],[6,"PresharedKeyBinder","","",N,N],[6,"PresharedKeyBinders","","",N,N],[6,"SCTList","","",N,N],[6,"PSKKeyExchangeModes","","",N,N],[6,"KeyShareEntries","","",N,N],[6,"ProtocolVersions","","",N,N],[6,"CertificatePayload","","",N,N],[6,"CertificateExtensions","","",N,N],[6,"EncryptedExtensions","","",N,N],[6,"ClientCertificateTypes","","",N,N],[6,"DistinguishedName","","",N,N],[6,"DistinguishedNames","","",N,N],[6,"CertReqExtensions","","",N,N],[6,"NewSessionTicketExtensions","","",N,N],[8,"SupportedPointFormats","","",N,N],[10,"supported","","",85,[[],["ecpointformatlist"]]],[8,"SupportedGroups","","",N,N],[10,"supported","","",86,[[],["namedgroups"]]],[8,"DecomposedSignatureScheme","","",N,N],[10,"sign","","",87,[[["self"]],["signaturealgorithm"]]],[10,"make","","",87,[[["signaturealgorithm"],["hashalgorithm"]],["signaturescheme"]]],[8,"SupportedMandatedSignatureSchemes","","",N,N],[10,"supported_verify","","",88,[[],["supportedsignatureschemes"]]],[10,"supported_sign_tls13","","",88,[[],["supportedsignatureschemes"]]],[8,"ConvertServerNameList","","",N,N],[10,"get_hostname","","",89,[[["self"]],["option",["dnsnameref"]]]],[8,"ConvertProtocolNameList","","",N,N],[10,"from_strings","","",90,N],[10,"to_strings","","",90,[[["self"]],["vec",["string"]]]],[10,"as_single_string","","",90,[[["self"]],["option",["str"]]]],[8,"HasServerExtensions","","",N,N],[10,"get_extensions","","",91,N],[11,"has_duplicate_extension","","Returns true if there is more than one extension of a given type.",91,[[["self"]],["bool"]]],[11,"find_extension","","",91,[[["self"],["extensiontype"]],["option",["serverextension"]]]],[11,"get_alpn_protocol","","",91,[[["self"]],["option",["str"]]]],[11,"get_quic_params_extension","","",91,[[["self"]],["option",["vec"]]]],[11,"early_data_extension_offered","","",91,[[["self"]],["bool"]]],[0,"ccs","rustls::internal::msgs","",N,N],[3,"ChangeCipherSpecPayload","rustls::internal::msgs::ccs","",N,N],[0,"message","rustls::internal::msgs","",N,N],[3,"Message","rustls::internal::msgs::message","A TLS frame, named TLSPlaintext in the standard. This type owns all memory for its interior parts.",N,N],[12,"typ","","",92,N],[12,"version","","",92,N],[12,"payload","","",92,N],[3,"BorrowMessage","","A TLS frame, named TLSPlaintext in the standard.",N,N],[12,"typ","","",93,N],[12,"version","","",93,N],[12,"payload","","",93,N],[4,"MessagePayload","","",N,N],[13,"Alert","","",94,N],[13,"Handshake","","",94,N],[13,"ChangeCipherSpec","","",94,N],[13,"Opaque","","",94,N],[0,"persist","rustls::internal::msgs","",N,N],[3,"ClientSessionKey","rustls::internal::msgs::persist","Keys for session resumption and tickets. Matching value is a `ClientSessionValue`.",N,N],[3,"ClientSessionValue","","",N,N],[12,"version","","",95,N],[12,"cipher_suite","","",95,N],[12,"session_id","","",95,N],[12,"ticket","","",95,N],[12,"master_secret","","",95,N],[12,"epoch","","",95,N],[12,"lifetime","","",95,N],[12,"age_add","","",95,N],[12,"extended_ms","","",95,N],[12,"max_early_data_size","","",95,N],[3,"ServerSessionValue","","",N,N],[12,"sni","","",96,N],[12,"version","","",96,N],[12,"cipher_suite","","",96,N],[12,"master_secret","","",96,N],[12,"extended_ms","","",96,N],[12,"client_cert_chain","","",96,N],[6,"ServerSessionKey","","",N,N],[0,"deframer","rustls::internal::msgs","",N,N],[3,"MessageDeframer","rustls::internal::msgs::deframer","This deframer works to reconstruct TLS messages from arbitrary-sized reads, buffering as necessary. The input is `read()`, the output is the `frames` deque.",N,N],[12,"frames","","Completed frames for output.",97,N],[12,"desynced","","Set to true if the peer is not talking TLS, but some other protocol.  The caller should abort the connection, because the deframer cannot recover.",97,N],[0,"fragmenter","rustls::internal::msgs","",N,N],[3,"MessageFragmenter","rustls::internal::msgs::fragmenter","",N,N],[17,"MAX_FRAGMENT_LEN","","",N,N],[17,"PACKET_OVERHEAD","","",N,N],[0,"hsjoiner","rustls::internal::msgs","",N,N],[3,"HandshakeJoiner","rustls::internal::msgs::hsjoiner","This works to reconstruct TLS handshake messages from individual TLS messages.  It's guaranteed that TLS messages output from this layer contain precisely one handshake payload.",N,N],[12,"frames","","Completed handshake frames for output.",98,N],[0,"sign","rustls","Message signing interfaces and implementations.",N,N],[3,"CertifiedKey","rustls::sign","A packaged-together certificate chain, matching `SigningKey` and optional stapled OCSP response and/or SCT.",N,N],[12,"cert","","The certificate chain.",99,N],[12,"key","","The certified key.",99,N],[12,"ocsp","","An optional OCSP response from the certificate issuer, attesting to its continued validity.",99,N],[12,"sct_list","","An optional collection of SCTs from CT logs, proving the certificate is included on those logs.  This must be a `SignedCertificateTimestampList` encoding; see RFC6962.",99,N],[3,"RSASigningKey","","A `SigningKey` for RSA-PKCS1 or RSA-PSS",N,N],[5,"any_supported_type","","Parse `der` as any supported key encoding/type, returning the first which works.",N,[[["privatekey"]],["result",["box"]]]],[5,"any_ecdsa_type","","Parse `der` as any ECDSA key type, returning the first which works.",N,[[["privatekey"]],["result",["box"]]]],[8,"SigningKey","","An abstract signing key.",N,N],[10,"choose_scheme","","Choose a `SignatureScheme` from those offered.",100,N],[10,"algorithm","","What kind of key we have.",100,[[["self"]],["signaturealgorithm"]]],[8,"Signer","","A thing that can sign a message.",N,N],[10,"sign","","Signs `message` using the selected scheme.",101,N],[10,"get_scheme","","Reveals which scheme will be used when you call `sign()`.",101,[[["self"]],["signaturescheme"]]],[11,"clone","","",99,[[["self"]],["certifiedkey"]]],[11,"new","","Make a new CertifiedKey, with the given chain and key.",99,[[["vec",["certificate"]],["arc",["box"]]],["certifiedkey"]]],[11,"end_entity_cert","","The end-entity certificate.",99,[[["self"]],["result",["certificate"]]]],[11,"take_cert","","Steal ownership of the certificate chain.",99,[[["self"]],["vec",["certificate"]]]],[11,"has_ocsp","","Return true if there's an OCSP response.",99,[[["self"]],["bool"]]],[11,"take_ocsp","","Steal ownership of the OCSP response.",99,[[["self"]],["option",["vec"]]]],[11,"has_sct_list","","Return true if there's an SCT list.",99,[[["self"]],["bool"]]],[11,"take_sct_list","","Steal ownership of the SCT list.",99,[[["self"]],["option",["vec"]]]],[11,"cross_check_end_entity_cert","","Check the certificate chain for validity: - it should be non-empty list - the first certificate should be parsable as a x509v3, - the first certificate should quote the given server name   (if provided)",99,[[["self"],["option",["dnsnameref"]]],["result",["tlserror"]]]],[11,"new","","Make a new `RSASigningKey` from a DER encoding, in either PKCS#1 or PKCS#8 format.",102,[[["privatekey"]],["result",["rsasigningkey"]]]],[11,"choose_scheme","","",102,N],[11,"algorithm","","",102,[[["self"]],["signaturealgorithm"]]],[6,"DistinguishedNames","rustls","",N,N],[7,"ALL_CIPHERSUITES","","A list of all the cipher suites supported by rustls.",N,N],[8,"Session","","Generalises `ClientSession` and `ServerSession`",N,N],[10,"read_tls","","Read TLS content from `rd`.  This method does internal buffering, so `rd` can supply TLS messages in arbitrary- sized chunks (like a socket or pipe might).",103,[[["self"],["read"]],["result",["usize","error"]]]],[10,"write_tls","","Writes TLS messages to `wr`.",103,[[["self"],["write"]],["result",["usize","error"]]]],[10,"writev_tls","","Like `write_tls`, but writes potentially many records in one go via `wr`; a `rustls::WriteV`.  This function has the same semantics as `write_tls` otherwise.",103,[[["self"],["writev"]],["result",["usize","error"]]]],[10,"process_new_packets","","Processes any new packets read by a previous call to `read_tls`. Errors from this function relate to TLS protocol errors, and are fatal to the session.  Future calls after an error will do no new work and will return the same error.",103,[[["self"]],["result",["tlserror"]]]],[10,"wants_read","","Returns true if the caller should call `read_tls` as soon as possible.",103,[[["self"]],["bool"]]],[10,"wants_write","","Returns true if the caller should call `write_tls` as soon as possible.",103,[[["self"]],["bool"]]],[10,"is_handshaking","","Returns true if the session is currently perform the TLS handshake.  During this time plaintext written to the session is buffered in memory.",103,[[["self"]],["bool"]]],[10,"set_buffer_limit","","Sets a limit on the internal buffers used to buffer unsent plaintext (prior to completing the TLS handshake) and unsent TLS records.",103,[[["self"],["usize"]]]],[10,"send_close_notify","","Queues a close_notify fatal alert to be sent in the next `write_tls` call.  This informs the peer that the connection is being closed.",103,[[["self"]]]],[10,"get_peer_certificates","","Retrieves the certificate chain used by the peer to authenticate.",103,[[["self"]],["option",["vec"]]]],[10,"get_alpn_protocol","","Retrieves the protocol agreed with the peer via ALPN.",103,[[["self"]],["option",["str"]]]],[10,"get_protocol_version","","Retrieves the protocol version agreed with the peer.",103,[[["self"]],["option",["protocolversion"]]]],[10,"export_keying_material","","Derives key material from the agreed session secrets.",103,N],[10,"get_negotiated_ciphersuite","","Retrieves the ciphersuite agreed with the peer.",103,[[["self"]],["option",["supportedciphersuite"]]]],[11,"complete_io","","This function uses `io` to complete any outstanding IO for this session.",103,[[["self"],["t"]],["result",["error"]]]],[8,"StoresClientSessions","","A trait for the ability to store client session data. The keys and values are opaque.",N,N],[10,"put","","Stores a new `value` for `key`.  Returns `true` if the value was stored.",104,[[["self"],["vec",["u8"]],["vec",["u8"]]],["bool"]]],[10,"get","","Returns the latest value for `key`.  Returns `None` if there's no such value.",104,N],[8,"ResolvesClientCert","","A trait for the ability to choose a certificate chain and private key for the purposes of client authentication.",N,N],[10,"resolve","","With the server-supplied acceptable issuers in `acceptable_issuers`, the server's supported signature schemes in `sigschemes`, return a certificate chain and signing key to authenticate.",105,N],[10,"has_certs","","Return true if any certificates at all are available.",105,[[["self"]],["bool"]]],[8,"StoresServerSessions","","A trait for the ability to store server session data.",N,N],[10,"put","","Store session secrets encoded in `value` against `key`, overwrites any existing value against `key`.  Returns `true` if the value was stored.",106,[[["self"],["vec",["u8"]],["vec",["u8"]]],["bool"]]],[10,"get","","Find a value with the given `key`.  Return it, or None if it doesn't exist.",106,N],[10,"take","","Find a value with the given `key`.  Return it and delete it; or None if it doesn't exist.",106,N],[8,"ResolvesServerCert","","How to choose a certificate chain and signing key for use in server authentication.",N,N],[10,"resolve","","Choose a certificate chain and matching key given any server DNS name provided via SNI, and signature schemes.",107,N],[8,"ProducesTickets","","A trait for the ability to encrypt and decrypt tickets.",N,N],[10,"enabled","","Returns true if this implementation will encrypt/decrypt tickets.  Should return false if this is a dummy implementation: the server will not send the SessionTicket extension and will not call the other functions.",108,[[["self"]],["bool"]]],[10,"get_lifetime","","Returns the lifetime in seconds of tickets produced now. The lifetime is provided as a hint to clients that the ticket will not be useful after the given time.",108,[[["self"]],["u32"]]],[10,"encrypt","","Encrypt and authenticate `plain`, returning the resulting ticket.  Return None if `plain` cannot be encrypted for some reason: an empty ticket will be sent and the connection will continue.",108,N],[10,"decrypt","","Decrypt `cipher`, validating its authenticity protection and recovering the plaintext.  `cipher` is fully attacker controlled, so this decryption must be side-channel free, panic-proof, and otherwise bullet-proof.  If the decryption fails, return None.",108,N],[8,"KeyLog","","This trait represents the ability to do something useful with key material, such as logging it to a file for debugging.",N,N],[10,"log","","Log the given `secret`.  `client_random` is provided for session identification.  `label` describes precisely what `secret` means:",109,N],[8,"WriteV","","This trait specifies rustls's precise requirements doing writes with vectored IO.",N,N],[10,"writev","","Writes as much data from `vbytes` as possible, returning the number of bytes written.",110,N],[11,"get_encoding","rustls::internal::msgs::codec","Convenience function to get the results of `encode()`.",27,[[["self"]],["vec",["u8"]]]],[11,"read_bytes","","Read one of these from the front of `bytes` and return it.",27,N],[11,"init","","",111,N],[11,"rest","","",111,N],[11,"take","","",111,[[["self"],["usize"]],["option"]]],[11,"any_left","","",111,[[["self"]],["bool"]]],[11,"left","","",111,[[["self"]],["usize"]]],[11,"used","","",111,[[["self"]],["usize"]]],[11,"sub","","",111,[[["self"],["usize"]],["option",["reader"]]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"decode","","",26,N],[11,"encode","","",26,[[["self"],["vec"]]]],[11,"read","","",26,[[["reader"]],["option",["u24"]]]],[11,"fmt","rustls::internal::msgs::base","",28,[[["self"],["formatter"]],["result"]]],[11,"clone","","",28,[[["self"]],["payload"]]],[11,"eq","","",28,[[["self"],["payload"]],["bool"]]],[11,"ne","","",28,[[["self"],["payload"]],["bool"]]],[11,"encode","","",28,[[["self"],["vec"]]]],[11,"read","","",28,[[["reader"]],["option",["payload"]]]],[11,"new","","",28,[[["vec",["u8"]]],["payload"]]],[11,"empty","","",28,[[],["payload"]]],[11,"from_slice","","",28,N],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"clone","","",29,[[["self"]],["payloadu24"]]],[11,"eq","","",29,[[["self"],["payloadu24"]],["bool"]]],[11,"ne","","",29,[[["self"],["payloadu24"]],["bool"]]],[11,"new","","",29,[[["vec",["u8"]]],["payloadu24"]]],[11,"empty","","",29,[[],["payloadu24"]]],[11,"encode","","",29,[[["self"],["vec"]]]],[11,"read","","",29,[[["reader"]],["option",["payloadu24"]]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"clone","","",30,[[["self"]],["payloadu16"]]],[11,"eq","","",30,[[["self"],["payloadu16"]],["bool"]]],[11,"ne","","",30,[[["self"],["payloadu16"]],["bool"]]],[11,"new","","",30,[[["vec",["u8"]]],["payloadu16"]]],[11,"empty","","",30,[[],["payloadu16"]]],[11,"encode","","",30,[[["self"],["vec"]]]],[11,"read","","",30,[[["reader"]],["option",["payloadu16"]]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"clone","","",31,[[["self"]],["payloadu8"]]],[11,"eq","","",31,[[["self"],["payloadu8"]],["bool"]]],[11,"ne","","",31,[[["self"],["payloadu8"]],["bool"]]],[11,"new","","",31,[[["vec",["u8"]]],["payloadu8"]]],[11,"empty","","",31,[[],["payloadu8"]]],[11,"encode","","",31,[[["self"],["vec"]]]],[11,"read","","",31,[[["reader"]],["option",["payloadu8"]]]],[11,"fmt","rustls::internal::msgs::enums","",32,[[["self"],["formatter"]],["result"]]],[11,"eq","","",32,[[["self"],["hashalgorithm"]],["bool"]]],[11,"ne","","",32,[[["self"],["hashalgorithm"]],["bool"]]],[11,"clone","","",32,[[["self"]],["hashalgorithm"]]],[11,"get_u8","","",32,[[["self"]],["u8"]]],[11,"encode","","",32,[[["self"],["vec"]]]],[11,"read","","",32,[[["reader"]],["option"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"eq","","",33,[[["self"],["signaturealgorithm"]],["bool"]]],[11,"ne","","",33,[[["self"],["signaturealgorithm"]],["bool"]]],[11,"clone","","",33,[[["self"]],["signaturealgorithm"]]],[11,"get_u8","","",33,[[["self"]],["u8"]]],[11,"encode","","",33,[[["self"],["vec"]]]],[11,"read","","",33,[[["reader"]],["option"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"eq","","",34,[[["self"],["clientcertificatetype"]],["bool"]]],[11,"ne","","",34,[[["self"],["clientcertificatetype"]],["bool"]]],[11,"clone","","",34,[[["self"]],["clientcertificatetype"]]],[11,"get_u8","","",34,[[["self"]],["u8"]]],[11,"encode","","",34,[[["self"],["vec"]]]],[11,"read","","",34,[[["reader"]],["option"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"eq","","",35,[[["self"],["compression"]],["bool"]]],[11,"ne","","",35,[[["self"],["compression"]],["bool"]]],[11,"clone","","",35,[[["self"]],["compression"]]],[11,"get_u8","","",35,[[["self"]],["u8"]]],[11,"encode","","",35,[[["self"],["vec"]]]],[11,"read","","",35,[[["reader"]],["option"]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"eq","","",36,[[["self"],["contenttype"]],["bool"]]],[11,"ne","","",36,[[["self"],["contenttype"]],["bool"]]],[11,"clone","","",36,[[["self"]],["contenttype"]]],[11,"get_u8","","",36,[[["self"]],["u8"]]],[11,"encode","","",36,[[["self"],["vec"]]]],[11,"read","","",36,[[["reader"]],["option"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"eq","","",37,[[["self"],["handshaketype"]],["bool"]]],[11,"ne","","",37,[[["self"],["handshaketype"]],["bool"]]],[11,"clone","","",37,[[["self"]],["handshaketype"]]],[11,"get_u8","","",37,[[["self"]],["u8"]]],[11,"encode","","",37,[[["self"],["vec"]]]],[11,"read","","",37,[[["reader"]],["option"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"eq","","",38,[[["self"],["alertlevel"]],["bool"]]],[11,"ne","","",38,[[["self"],["alertlevel"]],["bool"]]],[11,"clone","","",38,[[["self"]],["alertlevel"]]],[11,"get_u8","","",38,[[["self"]],["u8"]]],[11,"encode","","",38,[[["self"],["vec"]]]],[11,"read","","",38,[[["reader"]],["option"]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"eq","","",39,[[["self"],["alertdescription"]],["bool"]]],[11,"ne","","",39,[[["self"],["alertdescription"]],["bool"]]],[11,"clone","","",39,[[["self"]],["alertdescription"]]],[11,"get_u8","","",39,[[["self"]],["u8"]]],[11,"encode","","",39,[[["self"],["vec"]]]],[11,"read","","",39,[[["reader"]],["option"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"eq","","",40,[[["self"],["heartbeatmessagetype"]],["bool"]]],[11,"ne","","",40,[[["self"],["heartbeatmessagetype"]],["bool"]]],[11,"clone","","",40,[[["self"]],["heartbeatmessagetype"]]],[11,"get_u8","","",40,[[["self"]],["u8"]]],[11,"encode","","",40,[[["self"],["vec"]]]],[11,"read","","",40,[[["reader"]],["option"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"eq","","",41,[[["self"],["extensiontype"]],["bool"]]],[11,"ne","","",41,[[["self"],["extensiontype"]],["bool"]]],[11,"clone","","",41,[[["self"]],["extensiontype"]]],[11,"get_u16","","",41,[[["self"]],["u16"]]],[11,"encode","","",41,[[["self"],["vec"]]]],[11,"read","","",41,[[["reader"]],["option"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"eq","","",42,[[["self"],["servernametype"]],["bool"]]],[11,"ne","","",42,[[["self"],["servernametype"]],["bool"]]],[11,"clone","","",42,[[["self"]],["servernametype"]]],[11,"get_u8","","",42,[[["self"]],["u8"]]],[11,"encode","","",42,[[["self"],["vec"]]]],[11,"read","","",42,[[["reader"]],["option"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"eq","","",43,[[["self"],["namedcurve"]],["bool"]]],[11,"ne","","",43,[[["self"],["namedcurve"]],["bool"]]],[11,"clone","","",43,[[["self"]],["namedcurve"]]],[11,"get_u16","","",43,[[["self"]],["u16"]]],[11,"encode","","",43,[[["self"],["vec"]]]],[11,"read","","",43,[[["reader"]],["option"]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"eq","","",44,[[["self"],["namedgroup"]],["bool"]]],[11,"ne","","",44,[[["self"],["namedgroup"]],["bool"]]],[11,"clone","","",44,[[["self"]],["namedgroup"]]],[11,"get_u16","","",44,[[["self"]],["u16"]]],[11,"encode","","",44,[[["self"],["vec"]]]],[11,"read","","",44,[[["reader"]],["option"]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result"]]],[11,"eq","","",45,[[["self"],["ecpointformat"]],["bool"]]],[11,"ne","","",45,[[["self"],["ecpointformat"]],["bool"]]],[11,"clone","","",45,[[["self"]],["ecpointformat"]]],[11,"get_u8","","",45,[[["self"]],["u8"]]],[11,"encode","","",45,[[["self"],["vec"]]]],[11,"read","","",45,[[["reader"]],["option"]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"eq","","",46,[[["self"],["heartbeatmode"]],["bool"]]],[11,"ne","","",46,[[["self"],["heartbeatmode"]],["bool"]]],[11,"clone","","",46,[[["self"]],["heartbeatmode"]]],[11,"get_u8","","",46,[[["self"]],["u8"]]],[11,"encode","","",46,[[["self"],["vec"]]]],[11,"read","","",46,[[["reader"]],["option"]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result"]]],[11,"eq","","",47,[[["self"],["eccurvetype"]],["bool"]]],[11,"ne","","",47,[[["self"],["eccurvetype"]],["bool"]]],[11,"clone","","",47,[[["self"]],["eccurvetype"]]],[11,"get_u8","","",47,[[["self"]],["u8"]]],[11,"encode","","",47,[[["self"],["vec"]]]],[11,"read","","",47,[[["reader"]],["option"]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result"]]],[11,"eq","","",48,[[["self"],["pskkeyexchangemode"]],["bool"]]],[11,"ne","","",48,[[["self"],["pskkeyexchangemode"]],["bool"]]],[11,"clone","","",48,[[["self"]],["pskkeyexchangemode"]]],[11,"get_u8","","",48,[[["self"]],["u8"]]],[11,"encode","","",48,[[["self"],["vec"]]]],[11,"read","","",48,[[["reader"]],["option"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"eq","","",49,[[["self"],["keyupdaterequest"]],["bool"]]],[11,"ne","","",49,[[["self"],["keyupdaterequest"]],["bool"]]],[11,"clone","","",49,[[["self"]],["keyupdaterequest"]]],[11,"get_u8","","",49,[[["self"]],["u8"]]],[11,"encode","","",49,[[["self"],["vec"]]]],[11,"read","","",49,[[["reader"]],["option"]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result"]]],[11,"eq","","",50,[[["self"],["certificatestatustype"]],["bool"]]],[11,"ne","","",50,[[["self"],["certificatestatustype"]],["bool"]]],[11,"clone","","",50,[[["self"]],["certificatestatustype"]]],[11,"get_u8","","",50,[[["self"]],["u8"]]],[11,"encode","","",50,[[["self"],["vec"]]]],[11,"read","","",50,[[["reader"]],["option"]]],[11,"fmt","rustls::internal::msgs::alert","",51,[[["self"],["formatter"]],["result"]]],[11,"encode","","",51,[[["self"],["vec"]]]],[11,"read","","",51,[[["reader"]],["option",["alertmessagepayload"]]]],[11,"length","","",51,[[["self"]],["usize"]]],[11,"has_duplicate_extension","rustls::internal::msgs::handshake","Returns true if there is more than one extension of a given type.",91,[[["self"]],["bool"]]],[11,"find_extension","","",91,[[["self"],["extensiontype"]],["option",["serverextension"]]]],[11,"get_alpn_protocol","","",91,[[["self"]],["option",["str"]]]],[11,"get_quic_params_extension","","",91,[[["self"]],["option",["vec"]]]],[11,"early_data_extension_offered","","",91,[[["self"]],["bool"]]],[11,"encode","","",112,[[["self"],["vec"]]]],[11,"read","","",112,[[["reader"]],["option",["vecu16ofpayloadu8"]]]],[11,"encode","","",113,[[["self"],["vec"]]]],[11,"read","","",113,[[["reader"]],["option",["vecu16ofpayloadu16"]]]],[11,"fmt","","",114,[[["self"],["formatter"]],["result"]]],[11,"eq","","",114,[[["self"],["random"]],["bool"]]],[11,"ne","","",114,[[["self"],["random"]],["bool"]]],[11,"clone","","",114,[[["self"]],["random"]]],[11,"encode","","",114,[[["self"],["vec"]]]],[11,"read","","",114,[[["reader"]],["option",["random"]]]],[11,"from_slice","","",114,N],[11,"write_slice","","",114,N],[11,"clone","","",115,[[["self"]],["sessionid"]]],[11,"fmt","","",115,[[["self"],["formatter"]],["result"]]],[11,"eq","","",115,[[["self"],["self"]],["bool"]]],[11,"encode","","",115,[[["self"],["vec"]]]],[11,"read","","",115,[[["reader"]],["option",["sessionid"]]]],[11,"new","","",115,N],[11,"empty","","",115,[[],["sessionid"]]],[11,"len","","",115,[[["self"]],["usize"]]],[11,"is_empty","","",115,[[["self"]],["bool"]]],[11,"clone","","",52,[[["self"]],["unknownextension"]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result"]]],[11,"encode","","",116,[[["self"],["vec"]]]],[11,"read","","",116,[[["reader"]],["option",["ecpointformatlist"]]]],[11,"supported","","",116,[[],["ecpointformatlist"]]],[11,"encode","","",117,[[["self"],["vec"]]]],[11,"read","","",117,[[["reader"]],["option",["namedgroups"]]]],[11,"supported","","",117,[[],["namedgroups"]]],[11,"encode","","",118,[[["self"],["vec"]]]],[11,"read","","",118,[[["reader"]],["option",["supportedsignatureschemes"]]]],[11,"supported_verify","","Supported signature verification algorithms in decreasing order of expected security.",118,[[],["supportedsignatureschemes"]]],[11,"supported_sign_tls13","","",118,[[],["supportedsignatureschemes"]]],[11,"clone","","",74,[[["self"]],["servernamepayload"]]],[11,"fmt","","",74,[[["self"],["formatter"]],["result"]]],[11,"clone","","",53,[[["self"]],["servername"]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result"]]],[11,"encode","","",53,[[["self"],["vec"]]]],[11,"read","","",53,[[["reader"]],["option",["servername"]]]],[11,"encode","","",119,[[["self"],["vec"]]]],[11,"read","","",119,[[["reader"]],["option",["servernamerequest"]]]],[11,"get_hostname","","",119,[[["self"]],["option",["dnsnameref"]]]],[11,"from_strings","","",120,N],[11,"to_strings","","",120,[[["self"]],["vec",["string"]]]],[11,"as_single_string","","",120,[[["self"]],["option",["str"]]]],[11,"clone","","",54,[[["self"]],["keyshareentry"]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result"]]],[11,"new","","",54,N],[11,"encode","","",54,[[["self"],["vec"]]]],[11,"read","","",54,[[["reader"]],["option",["keyshareentry"]]]],[11,"clone","","",55,[[["self"]],["presharedkeyidentity"]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result"]]],[11,"new","","",55,[[["vec",["u8"]],["u32"]],["presharedkeyidentity"]]],[11,"encode","","",55,[[["self"],["vec"]]]],[11,"read","","",55,[[["reader"]],["option",["presharedkeyidentity"]]]],[11,"encode","","",121,[[["self"],["vec"]]]],[11,"read","","",121,[[["reader"]],["option",["presharedkeyidentities"]]]],[11,"clone","","",56,[[["self"]],["presharedkeyoffer"]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result"]]],[11,"new","","Make a new one with one entry.",56,[[["presharedkeyidentity"],["vec",["u8"]]],["presharedkeyoffer"]]],[11,"encode","","",56,[[["self"],["vec"]]]],[11,"read","","",56,[[["reader"]],["option",["presharedkeyoffer"]]]],[11,"clone","","",57,[[["self"]],["ocspcertificatestatusrequest"]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result"]]],[11,"encode","","",57,[[["self"],["vec"]]]],[11,"read","","",57,[[["reader"]],["option",["ocspcertificatestatusrequest"]]]],[11,"clone","","",75,[[["self"]],["certificatestatusrequest"]]],[11,"fmt","","",75,[[["self"],["formatter"]],["result"]]],[11,"encode","","",75,[[["self"],["vec"]]]],[11,"read","","",75,[[["reader"]],["option",["certificatestatusrequest"]]]],[11,"build_ocsp","","",75,[[],["certificatestatusrequest"]]],[11,"encode","","",122,[[["self"],["vec"]]]],[11,"read","","",122,[[["reader"]],["option",["pskkeyexchangemodes"]]]],[11,"encode","","",123,[[["self"],["vec"]]]],[11,"read","","",123,[[["reader"]],["option",["keyshareentries"]]]],[11,"encode","","",124,[[["self"],["vec"]]]],[11,"read","","",124,[[["reader"]],["option",["protocolversions"]]]],[11,"clone","","",76,[[["self"]],["clientextension"]]],[11,"fmt","","",76,[[["self"],["formatter"]],["result"]]],[11,"get_type","","",76,[[["self"]],["extensiontype"]]],[11,"encode","","",76,[[["self"],["vec"]]]],[11,"read","","",76,[[["reader"]],["option",["clientextension"]]]],[11,"make_sni","","Make a basic SNI ServerNameRequest quoting `hostname`.",76,[[["dnsnameref"]],["clientextension"]]],[11,"clone","","",77,[[["self"]],["serverextension"]]],[11,"fmt","","",77,[[["self"],["formatter"]],["result"]]],[11,"get_type","","",77,[[["self"]],["extensiontype"]]],[11,"encode","","",77,[[["self"],["vec"]]]],[11,"read","","",77,[[["reader"]],["option",["serverextension"]]]],[11,"make_alpn","","",77,[[["string"]],["serverextension"]]],[11,"make_empty_renegotiation_info","","",77,[[],["serverextension"]]],[11,"make_sct","","",77,[[["vec",["u8"]]],["serverextension"]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result"]]],[11,"encode","","",58,[[["self"],["vec"]]]],[11,"read","","",58,[[["reader"]],["option",["clienthellopayload"]]]],[11,"has_duplicate_extension","","Returns true if there is more than one extension of a given type.",58,[[["self"]],["bool"]]],[11,"find_extension","","",58,[[["self"],["extensiontype"]],["option",["clientextension"]]]],[11,"get_sni_extension","","",58,[[["self"]],["option",["servernamerequest"]]]],[11,"get_sigalgs_extension","","",58,[[["self"]],["option",["supportedsignatureschemes"]]]],[11,"get_namedgroups_extension","","",58,[[["self"]],["option",["namedgroups"]]]],[11,"get_ecpoints_extension","","",58,[[["self"]],["option",["ecpointformatlist"]]]],[11,"get_alpn_extension","","",58,[[["self"]],["option",["protocolnamelist"]]]],[11,"get_quic_params_extension","","",58,[[["self"]],["option",["vec"]]]],[11,"get_ticket_extension","","",58,[[["self"]],["option",["clientextension"]]]],[11,"get_versions_extension","","",58,[[["self"]],["option",["protocolversions"]]]],[11,"get_keyshare_extension","","",58,[[["self"]],["option",["keyshareentries"]]]],[11,"has_keyshare_extension_with_duplicates","","",58,[[["self"]],["bool"]]],[11,"get_psk","","",58,[[["self"]],["option",["presharedkeyoffer"]]]],[11,"check_psk_ext_is_last","","",58,[[["self"]],["bool"]]],[11,"get_psk_modes","","",58,[[["self"]],["option",["pskkeyexchangemodes"]]]],[11,"psk_mode_offered","","",58,[[["self"],["pskkeyexchangemode"]],["bool"]]],[11,"set_psk_binder","","",58,[[["self"],["vec",["u8"]]]]],[11,"ems_support_offered","","",58,[[["self"]],["bool"]]],[11,"early_data_extension_offered","","",58,[[["self"]],["bool"]]],[11,"fmt","","",78,[[["self"],["formatter"]],["result"]]],[11,"get_type","","",78,[[["self"]],["extensiontype"]]],[11,"encode","","",78,[[["self"],["vec"]]]],[11,"read","","",78,[[["reader"]],["option",["helloretryextension"]]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result"]]],[11,"encode","","",59,[[["self"],["vec"]]]],[11,"read","","",59,[[["reader"]],["option",["helloretryrequest"]]]],[11,"has_duplicate_extension","","Returns true if there is more than one extension of a given type.",59,[[["self"]],["bool"]]],[11,"has_unknown_extension","","",59,[[["self"]],["bool"]]],[11,"get_requested_key_share_group","","",59,[[["self"]],["option",["namedgroup"]]]],[11,"get_cookie","","",59,[[["self"]],["option",["payloadu16"]]]],[11,"get_supported_versions","","",59,[[["self"]],["option",["protocolversion"]]]],[11,"fmt","","",60,[[["self"],["formatter"]],["result"]]],[11,"encode","","",60,[[["self"],["vec"]]]],[11,"read","","",60,[[["reader"]],["option",["serverhellopayload"]]]],[11,"get_extensions","","",60,N],[11,"get_key_share","","",60,[[["self"]],["option",["keyshareentry"]]]],[11,"get_psk_index","","",60,[[["self"]],["option",["u16"]]]],[11,"get_ecpoints_extension","","",60,[[["self"]],["option",["ecpointformatlist"]]]],[11,"ems_support_acked","","",60,[[["self"]],["bool"]]],[11,"get_sct_list","","",60,[[["self"]],["option",["sctlist"]]]],[11,"get_supported_versions","","",60,[[["self"]],["option",["protocolversion"]]]],[11,"encode","","",125,[[["self"],["vec"]]]],[11,"read","","",125,[[["reader"]],["option",["certificatepayload"]]]],[11,"fmt","","",79,[[["self"],["formatter"]],["result"]]],[11,"get_type","","",79,[[["self"]],["extensiontype"]]],[11,"make_sct","","",79,[[["vec",["u8"]]],["certificateextension"]]],[11,"get_cert_status","","",79,[[["self"]],["option",["vec"]]]],[11,"get_sct_list","","",79,[[["self"]],["option",["sctlist"]]]],[11,"encode","","",79,[[["self"],["vec"]]]],[11,"read","","",79,[[["reader"]],["option",["certificateextension"]]]],[11,"encode","","",126,[[["self"],["vec"]]]],[11,"read","","",126,[[["reader"]],["option",["certificateextensions"]]]],[11,"fmt","","",61,[[["self"],["formatter"]],["result"]]],[11,"encode","","",61,[[["self"],["vec"]]]],[11,"read","","",61,[[["reader"]],["option",["certificateentry"]]]],[11,"new","","",61,[[["certificate"]],["certificateentry"]]],[11,"has_duplicate_extension","","",61,[[["self"]],["bool"]]],[11,"has_unknown_extension","","",61,[[["self"]],["bool"]]],[11,"get_ocsp_response","","",61,[[["self"]],["option",["vec"]]]],[11,"get_scts","","",61,[[["self"]],["option",["sctlist"]]]],[11,"fmt","","",62,[[["self"],["formatter"]],["result"]]],[11,"encode","","",62,[[["self"],["vec"]]]],[11,"read","","",62,[[["reader"]],["option",["certificatepayloadtls13"]]]],[11,"new","","",62,[[],["certificatepayloadtls13"]]],[11,"any_entry_has_duplicate_extension","","",62,[[["self"]],["bool"]]],[11,"any_entry_has_unknown_extension","","",62,[[["self"]],["bool"]]],[11,"any_entry_has_extension","","",62,[[["self"]],["bool"]]],[11,"get_end_entity_ocsp","","",62,[[["self"]],["vec",["u8"]]]],[11,"get_end_entity_scts","","",62,[[["self"]],["option",["sctlist"]]]],[11,"convert","","",62,[[["self"]],["certificatepayload"]]],[11,"fmt","","",80,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",63,[[["self"],["formatter"]],["result"]]],[11,"encode","","",63,[[["self"],["vec"]]]],[11,"read","","",63,[[["reader"]],["option",["ecparameters"]]]],[11,"fmt","","",64,[[["self"],["formatter"]],["result"]]],[11,"clone","","",64,[[["self"]],["digitallysignedstruct"]]],[11,"new","","",64,[[["signaturescheme"],["vec",["u8"]]],["digitallysignedstruct"]]],[11,"encode","","",64,[[["self"],["vec"]]]],[11,"read","","",64,[[["reader"]],["option",["digitallysignedstruct"]]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result"]]],[11,"encode","","",65,[[["self"],["vec"]]]],[11,"read","","",65,[[["reader"]],["option",["clientecdhparams"]]]],[11,"fmt","","",66,[[["self"],["formatter"]],["result"]]],[11,"new","","",66,N],[11,"encode","","",66,[[["self"],["vec"]]]],[11,"read","","",66,[[["reader"]],["option",["serverecdhparams"]]]],[11,"fmt","","",67,[[["self"],["formatter"]],["result"]]],[11,"encode","","",67,[[["self"],["vec"]]]],[11,"read","","",67,[[["reader"]],["option",["ecdheserverkeyexchange"]]]],[11,"fmt","","",81,[[["self"],["formatter"]],["result"]]],[11,"encode","","",81,[[["self"],["vec"]]]],[11,"read","","",81,[[["reader"]],["option",["serverkeyexchangepayload"]]]],[11,"unwrap_given_kxa","","",81,[[["self"],["keyexchangealgorithm"]],["option",["serverkeyexchangepayload"]]]],[11,"encode_params","","",81,[[["self"],["vec"]]]],[11,"get_sig","","",81,[[["self"]],["option",["digitallysignedstruct"]]]],[11,"encode","","",127,[[["self"],["vec"]]]],[11,"read","","",127,[[["reader"]],["option",["encryptedextensions"]]]],[11,"get_extensions","","",127,N],[11,"encode","","",128,[[["self"],["vec"]]]],[11,"read","","",128,[[["reader"]],["option",["clientcertificatetypes"]]]],[11,"fmt","","",68,[[["self"],["formatter"]],["result"]]],[11,"encode","","",68,[[["self"],["vec"]]]],[11,"read","","",68,[[["reader"]],["option",["certificaterequestpayload"]]]],[11,"fmt","","",82,[[["self"],["formatter"]],["result"]]],[11,"get_type","","",82,[[["self"]],["extensiontype"]]],[11,"encode","","",82,[[["self"],["vec"]]]],[11,"read","","",82,[[["reader"]],["option",["certreqextension"]]]],[11,"encode","","",129,[[["self"],["vec"]]]],[11,"read","","",129,[[["reader"]],["option",["certreqextensions"]]]],[11,"fmt","","",69,[[["self"],["formatter"]],["result"]]],[11,"encode","","",69,[[["self"],["vec"]]]],[11,"read","","",69,[[["reader"]],["option",["certificaterequestpayloadtls13"]]]],[11,"find_extension","","",69,[[["self"],["extensiontype"]],["option",["certreqextension"]]]],[11,"get_sigalgs_extension","","",69,[[["self"]],["option",["supportedsignatureschemes"]]]],[11,"get_authorities_extension","","",69,[[["self"]],["option",["distinguishednames"]]]],[11,"fmt","","",70,[[["self"],["formatter"]],["result"]]],[11,"new","","",70,[[["u32"],["vec",["u8"]]],["newsessionticketpayload"]]],[11,"encode","","",70,[[["self"],["vec"]]]],[11,"read","","",70,[[["reader"]],["option",["newsessionticketpayload"]]]],[11,"fmt","","",83,[[["self"],["formatter"]],["result"]]],[11,"get_type","","",83,[[["self"]],["extensiontype"]]],[11,"encode","","",83,[[["self"],["vec"]]]],[11,"read","","",83,[[["reader"]],["option",["newsessionticketextension"]]]],[11,"encode","","",130,[[["self"],["vec"]]]],[11,"read","","",130,[[["reader"]],["option",["newsessionticketextensions"]]]],[11,"fmt","","",71,[[["self"],["formatter"]],["result"]]],[11,"new","","",71,[[["u32"],["u32"],["vec",["u8"]],["vec",["u8"]]],["newsessionticketpayloadtls13"]]],[11,"find_extension","","",71,[[["self"],["extensiontype"]],["option",["newsessionticketextension"]]]],[11,"get_max_early_data_size","","",71,[[["self"]],["option",["u32"]]]],[11,"encode","","",71,[[["self"],["vec"]]]],[11,"read","","",71,[[["reader"]],["option",["newsessionticketpayloadtls13"]]]],[11,"fmt","","",72,[[["self"],["formatter"]],["result"]]],[11,"encode","","",72,[[["self"],["vec"]]]],[11,"read","","",72,[[["reader"]],["option",["certificatestatus"]]]],[11,"new","","",72,[[["vec",["u8"]]],["certificatestatus"]]],[11,"take_ocsp_response","","",72,[[["self"]],["vec",["u8"]]]],[11,"fmt","","",84,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",73,[[["self"],["formatter"]],["result"]]],[11,"encode","","",73,[[["self"],["vec"]]]],[11,"read","","",73,[[["reader"]],["option",["handshakemessagepayload"]]]],[11,"length","","",73,[[["self"]],["usize"]]],[11,"read_version","","",73,[[["reader"],["protocolversion"]],["option",["handshakemessagepayload"]]]],[11,"build_key_update_notify","","",73,[[],["handshakemessagepayload"]]],[11,"get_encoding_for_binder_signing","","",73,[[["self"]],["vec",["u8"]]]],[11,"build_handshake_hash","","",73,N],[11,"fmt","rustls::internal::msgs::ccs","",131,[[["self"],["formatter"]],["result"]]],[11,"encode","","",131,[[["self"],["vec"]]]],[11,"read","","",131,[[["reader"]],["option",["changecipherspecpayload"]]]],[11,"length","","",131,[[["self"]],["usize"]]],[11,"fmt","rustls::internal::msgs::message","",94,[[["self"],["formatter"]],["result"]]],[11,"encode","","",94,[[["self"],["vec"]]]],[11,"decode_given_type","","",94,[[["self"],["contenttype"],["protocolversion"]],["option",["messagepayload"]]]],[11,"length","","",94,[[["self"]],["usize"]]],[11,"new_opaque","","",94,[[["vec",["u8"]]],["messagepayload"]]],[11,"fmt","","",92,[[["self"],["formatter"]],["result"]]],[11,"read","","",92,[[["reader"]],["option",["message"]]]],[11,"encode","","",92,[[["self"],["vec"]]]],[11,"check_header","","Do some very lax checks on the header, and return None if it looks really broken.  Otherwise, return the length field.",92,N],[11,"is_content_type","","",92,[[["self"],["contenttype"]],["bool"]]],[11,"is_handshake_type","","",92,[[["self"],["handshaketype"]],["bool"]]],[11,"decode_payload","","",92,[[["self"]],["bool"]]],[11,"take_payload","","",92,[[["self"]],["vec",["u8"]]]],[11,"take_opaque_payload","","",92,[[["self"]],["option",["payload"]]]],[11,"into_opaque","","",92,[[["self"]],["message"]]],[11,"build_alert","","",92,[[["alertlevel"],["alertdescription"]],["message"]]],[11,"build_key_update_notify","","",92,[[],["message"]]],[11,"to_borrowed","","",92,[[["self"]],["borrowmessage"]]],[11,"fmt","","",93,[[["self"],["formatter"]],["result"]]],[11,"fmt","rustls::internal::msgs::persist","",132,[[["self"],["formatter"]],["result"]]],[11,"encode","","",132,[[["self"],["vec"]]]],[11,"read","","",132,[[["reader"]],["option",["clientsessionkey"]]]],[11,"session_for_dns_name","","",132,[[["dnsnameref"]],["clientsessionkey"]]],[11,"hint_for_dns_name","","",132,[[["dnsnameref"]],["clientsessionkey"]]],[11,"fmt","","",95,[[["self"],["formatter"]],["result"]]],[11,"encode","","",95,[[["self"],["vec"]]]],[11,"read","","",95,[[["reader"]],["option",["clientsessionvalue"]]]],[11,"new","","",95,[[["protocolversion"],["ciphersuite"],["sessionid"],["vec",["u8"]],["vec",["u8"]]],["clientsessionvalue"]]],[11,"set_extended_ms_used","","",95,[[["self"]]]],[11,"set_times","","",95,[[["self"],["u64"],["u32"],["u32"]]]],[11,"has_expired","","",95,[[["self"],["u64"]],["bool"]]],[11,"get_obfuscated_ticket_age","","",95,[[["self"],["u64"]],["u32"]]],[11,"take_ticket","","",95,[[["self"]],["vec",["u8"]]]],[11,"set_max_early_data_size","","",95,[[["self"],["u32"]]]],[11,"fmt","","",96,[[["self"],["formatter"]],["result"]]],[11,"encode","","",96,[[["self"],["vec"]]]],[11,"read","","",96,[[["reader"]],["option",["serversessionvalue"]]]],[11,"new","","",96,[[["option",["dnsname"]],["protocolversion"],["ciphersuite"],["vec",["u8"]],["option"]],["serversessionvalue"]]],[11,"set_extended_ms_used","","",96,[[["self"]]]],[11,"new","rustls::internal::msgs::deframer","",97,[[],["messagedeframer"]]],[11,"read","","Read some bytes from `rd`, and add them to our internal buffer.  If this means our internal buffer contains full messages, decode them all.",97,[[["self"],["read"]],["result",["usize"]]]],[11,"has_pending","","Returns true if we have messages for the caller to process, either whole messages in our output queue or partial messages in our buffer.",97,[[["self"]],["bool"]]],[11,"new","rustls::internal::msgs::fragmenter","Make a new fragmenter.  `max_fragment_len` is the maximum fragment size that will be produced -- this does not include overhead (so a `max_fragment_len` of 5 will produce 10 byte packets).",133,[[["usize"]],["messagefragmenter"]]],[11,"fragment","","Take the Message `msg` and re-fragment it into new messages whose fragment is no more than max_frag. The new messages are appended to the `out` deque. Payloads are copied.",133,[[["self"],["message"],["vecdeque"]]]],[11,"fragment_borrow","","Enqueue borrowed fragments of (version, typ, payload) which are no longer than max_frag onto the `out` deque.",133,N],[11,"new","rustls::internal::msgs::hsjoiner","Make a new HandshakeJoiner.",98,[[],["handshakejoiner"]]],[11,"want_message","","Do we want to process this message?",98,[[["self"],["message"]],["bool"]]],[11,"is_empty","","Do we have any buffered data?",98,[[["self"]],["bool"]]],[11,"take_message","","Take the message, and join/split it as needed. Return the number of new messages added to the output deque as a result of this message.",98,[[["self"],["message"]],["option",["usize"]]]],[11,"complete_io","rustls","This function uses `io` to complete any outstanding IO for this session.",103,[[["self"],["t"]],["result",["error"]]]]],"paths":[[3,"Stream"],[3,"StreamOwned"],[3,"RootCertStore"],[3,"ClientConfig"],[3,"ServerConfig"],[3,"SupportedCipherSuite"],[3,"Certificate"],[3,"PrivateKey"],[4,"ProtocolVersion"],[4,"SignatureScheme"],[4,"CipherSuite"],[4,"TLSError"],[4,"BulkAlgorithm"],[3,"AllowAnyAuthenticatedClient"],[3,"AllowAnyAnonymousOrAuthenticatedClient"],[3,"NoClientAuth"],[3,"Ticketer"],[3,"NoServerSessionStorage"],[3,"ServerSessionMemoryCache"],[3,"ResolvesServerCertUsingSNI"],[3,"ServerSession"],[3,"NoClientSessionStorage"],[3,"ClientSessionMemoryCache"],[3,"ClientSession"],[3,"NoKeyLog"],[3,"KeyLogFile"],[3,"u24"],[8,"Codec"],[3,"Payload"],[3,"PayloadU24"],[3,"PayloadU16"],[3,"PayloadU8"],[4,"HashAlgorithm"],[4,"SignatureAlgorithm"],[4,"ClientCertificateType"],[4,"Compression"],[4,"ContentType"],[4,"HandshakeType"],[4,"AlertLevel"],[4,"AlertDescription"],[4,"HeartbeatMessageType"],[4,"ExtensionType"],[4,"ServerNameType"],[4,"NamedCurve"],[4,"NamedGroup"],[4,"ECPointFormat"],[4,"HeartbeatMode"],[4,"ECCurveType"],[4,"PSKKeyExchangeMode"],[4,"KeyUpdateRequest"],[4,"CertificateStatusType"],[3,"AlertMessagePayload"],[3,"UnknownExtension"],[3,"ServerName"],[3,"KeyShareEntry"],[3,"PresharedKeyIdentity"],[3,"PresharedKeyOffer"],[3,"OCSPCertificateStatusRequest"],[3,"ClientHelloPayload"],[3,"HelloRetryRequest"],[3,"ServerHelloPayload"],[3,"CertificateEntry"],[3,"CertificatePayloadTLS13"],[3,"ECParameters"],[3,"DigitallySignedStruct"],[3,"ClientECDHParams"],[3,"ServerECDHParams"],[3,"ECDHEServerKeyExchange"],[3,"CertificateRequestPayload"],[3,"CertificateRequestPayloadTLS13"],[3,"NewSessionTicketPayload"],[3,"NewSessionTicketPayloadTLS13"],[3,"CertificateStatus"],[3,"HandshakeMessagePayload"],[4,"ServerNamePayload"],[4,"CertificateStatusRequest"],[4,"ClientExtension"],[4,"ServerExtension"],[4,"HelloRetryExtension"],[4,"CertificateExtension"],[4,"KeyExchangeAlgorithm"],[4,"ServerKeyExchangePayload"],[4,"CertReqExtension"],[4,"NewSessionTicketExtension"],[4,"HandshakePayload"],[8,"SupportedPointFormats"],[8,"SupportedGroups"],[8,"DecomposedSignatureScheme"],[8,"SupportedMandatedSignatureSchemes"],[8,"ConvertServerNameList"],[8,"ConvertProtocolNameList"],[8,"HasServerExtensions"],[3,"Message"],[3,"BorrowMessage"],[4,"MessagePayload"],[3,"ClientSessionValue"],[3,"ServerSessionValue"],[3,"MessageDeframer"],[3,"HandshakeJoiner"],[3,"CertifiedKey"],[8,"SigningKey"],[8,"Signer"],[3,"RSASigningKey"],[8,"Session"],[8,"StoresClientSessions"],[8,"ResolvesClientCert"],[8,"StoresServerSessions"],[8,"ResolvesServerCert"],[8,"ProducesTickets"],[8,"KeyLog"],[8,"WriteV"],[3,"Reader"],[6,"VecU16OfPayloadU8"],[6,"VecU16OfPayloadU16"],[3,"Random"],[3,"SessionID"],[6,"ECPointFormatList"],[6,"NamedGroups"],[6,"SupportedSignatureSchemes"],[6,"ServerNameRequest"],[6,"ProtocolNameList"],[6,"PresharedKeyIdentities"],[6,"PSKKeyExchangeModes"],[6,"KeyShareEntries"],[6,"ProtocolVersions"],[6,"CertificatePayload"],[6,"CertificateExtensions"],[6,"EncryptedExtensions"],[6,"ClientCertificateTypes"],[6,"CertReqExtensions"],[6,"NewSessionTicketExtensions"],[3,"ChangeCipherSpecPayload"],[3,"ClientSessionKey"],[3,"MessageFragmenter"]]};
searchIndex["tower_service"]={"doc":"Definition of the core `Service` trait to Tower","items":[[3,"Ready","tower_service","Future yielding a `Service` once the service is ready to process a request",N,N],[8,"Service","","An asynchronous function from `Request` to a `Response`.",N,N],[16,"Request","","Requests handled by the service.",0,N],[16,"Response","","Responses given by the service.",0,N],[16,"Error","","Errors produced by the service.",0,N],[16,"Future","","The future response value.",0,N],[11,"ready","","A future yielding the service when it is ready to accept a request.",0,[[["self"]],["ready"]]],[10,"poll_ready","","Returns `Ready` when the service is able to process requests.",0,[[["self"]],["poll"]]],[10,"call","","Process the request and return the response asynchronously.",0,N],[8,"NewService","","Creates new `Service` values.",N,N],[16,"Request","","Requests handled by the service",1,N],[16,"Response","","Responses given by the service",1,N],[16,"Error","","Errors produced by the service",1,N],[16,"Service","","The `Service` value created by this factory",1,N],[16,"InitError","","Errors produced while building a service.",1,N],[16,"Future","","The future of the `Service` instance.",1,N],[10,"new_service","","Create and return a new service value asynchronously.",1,N],[11,"poll","","",2,[[["self"]],["poll"]]]],"paths":[[8,"Service"],[8,"NewService"],[3,"Ready"]]};
searchIndex["tsukuyomi_server"]={"doc":"A general purpose HTTP server based on Hyper and tower-service.","items":[[5,"server","tsukuyomi_server","",N,[[["s"]],["server"]]],[0,"local","","",N,N],[3,"Data","tsukuyomi_server::local","A type representing a received HTTP message data from the server.",N,N],[3,"Client","","A type which emulates a connection to a peer.",N,N],[3,"LocalServer","","A local server which emulates an HTTP service without using the low-level transport.",N,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"chunks","","",0,[[["self"]],["vec"]]],[11,"trailers","","",0,[[["self"]],["option",["headermap"]]]],[11,"content_length","","",0,[[["self"]],["option",["u64"]]]],[11,"to_bytes","","",0,[[["self"]],["cow"]]],[11,"to_utf8","","",0,[[["self"]],["result",["cow","utf8error"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new instance of `LocalServer` from a `NewHttpService`.",1,[[["s"]],["result",["localserver"]]]],[11,"client","","Create a `Client` associated with this server.",1,[[["self"]],["result",["client"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"perform","","Applies an HTTP request to this client and get its response.",2,[[["self"],["t"]],["result",["response","criterror"]]]],[11,"runtime","","Returns the reference to the underlying Tokio runtime.",2,[[["self"]],["runtime"]]],[8,"Input","","",N,N],[8,"IntoRequestBody","","",N,N],[0,"rt","tsukuyomi_server","Primitives for spawning asynchronous tasks",N,N],[5,"spawn_with_handle","tsukuyomi_server::rt","Spawns a future onto the default executor and returns its handle.",N,[[["f"]],["spawnhandle"]]],[0,"server","tsukuyomi_server","",N,N],[3,"Server","tsukuyomi_server::server","",N,N],[0,"transport","","",N,N],[3,"TlsConfig","tsukuyomi_server::server::transport","",N,N],[11,"new","","",3,N],[8,"Transport","","",N,N],[8,"Transport","tsukuyomi_server::server","",N,N],[11,"new","","",4,[[["s"]],["server"]]],[11,"transport","","",4,[[["self"],["tr"]],["server"]]],[11,"protocol","","",4,[[["self"],["http"]],["server"]]],[11,"run_forever","","",4,[[["self"]],["result"]]],[11,"run_until","","",4,[[["self"],["f"]],["result"]]],[0,"service","tsukuyomi_server","",N,N],[0,"http","tsukuyomi_server::service","",N,N],[3,"OnUpgrade","tsukuyomi_server::service::http","",N,N],[3,"RequestBody","","",N,N],[3,"UpgradedIo","","An asynchronous I/O upgraded from HTTP connection.",N,N],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"poll","","",5,[[["self"]],["poll"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"read","","",6,N],[11,"write","","",6,N],[11,"flush","","",6,[[["self"]],["result"]]],[11,"prepare_uninitialized_buffer","","",6,N],[11,"read_buf","","",6,[[["self"],["b"]],["poll",["usize","error"]]]],[11,"shutdown","","",6,[[["self"]],["poll",["error"]]]],[11,"write_buf","","",6,[[["self"],["b"]],["poll",["usize","error"]]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"on_upgrade","","",7,[[["self"]],["onupgrade"]]],[11,"poll_data","","",7,[[["self"]],["poll",["option"]]]],[11,"poll_trailers","","",7,[[["self"]],["poll",["option"]]]],[11,"is_end_stream","","",7,[[["self"]],["bool"]]],[11,"content_length","","",7,[[["self"]],["option",["u64"]]]],[11,"poll","","",7,[[["self"]],["poll",["option"]]]],[8,"HttpRequest","","",N,N],[8,"HttpResponse","","",N,N],[0,"middleware","tsukuyomi_server::service","",N,N],[3,"MiddlewareChain","tsukuyomi_server::service::middleware","",N,N],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"new_service","","",8,N],[8,"Middleware","","",N,N],[16,"Request","","",9,N],[16,"Response","","",9,N],[16,"Error","","",9,N],[16,"Service","","",9,N],[10,"wrap","","",9,N],[8,"NewServiceExt","tsukuyomi_server::service","",N,N],[11,"with_middleware","","",10,[[["self"],["m"]],["middlewarechain"]]],[0,"vendor","tsukuyomi_server","",N,N],[6,"CritError","","A type alias representing a critical error.",N,N],[11,"with_middleware","tsukuyomi_server::service","",10,[[["self"],["m"]],["middlewarechain"]]]],"paths":[[3,"Data"],[3,"LocalServer"],[3,"Client"],[3,"TlsConfig"],[3,"Server"],[3,"OnUpgrade"],[3,"UpgradedIo"],[3,"RequestBody"],[3,"MiddlewareChain"],[8,"Middleware"],[8,"NewServiceExt"]]};
initSearch(searchIndex);
